#line 2 "lex.yy.c"

#line 4 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer itex2MML_yy_create_buffer
#define yy_delete_buffer itex2MML_yy_delete_buffer
#define yy_flex_debug itex2MML_yy_flex_debug
#define yy_init_buffer itex2MML_yy_init_buffer
#define yy_flush_buffer itex2MML_yy_flush_buffer
#define yy_load_buffer_state itex2MML_yy_load_buffer_state
#define yy_switch_to_buffer itex2MML_yy_switch_to_buffer
#define yyin itex2MML_yyin
#define yyleng itex2MML_yyleng
#define yylex itex2MML_yylex
#define yylineno itex2MML_yylineno
#define yyout itex2MML_yyout
#define yyrestart itex2MML_yyrestart
#define yytext itex2MML_yytext
#define yywrap itex2MML_yywrap
#define yyalloc itex2MML_yyalloc
#define yyrealloc itex2MML_yyrealloc
#define yyfree itex2MML_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE itex2MML_yyrestart(itex2MML_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int itex2MML_yyleng;

extern FILE *itex2MML_yyin, *itex2MML_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up itex2MML_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up itex2MML_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via itex2MML_yyrestart()), so that the user can continue scanning by
	 * just pointing itex2MML_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when itex2MML_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int itex2MML_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow itex2MML_yywrap()'s to do buffer switches
 * instead of setting up a fresh itex2MML_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void itex2MML_yyrestart (FILE *input_file  );
void itex2MML_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE itex2MML_yy_create_buffer (FILE *file,int size  );
void itex2MML_yy_delete_buffer (YY_BUFFER_STATE b  );
void itex2MML_yy_flush_buffer (YY_BUFFER_STATE b  );
void itex2MML_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void itex2MML_yypop_buffer_state (void );

static void itex2MML_yyensure_buffer_stack (void );
static void itex2MML_yy_load_buffer_state (void );
static void itex2MML_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER itex2MML_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE itex2MML_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE itex2MML_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE itex2MML_yy_scan_bytes (yyconst char *bytes,int len  );

void *itex2MML_yyalloc (yy_size_t  );
void *itex2MML_yyrealloc (void *,yy_size_t  );
void itex2MML_yyfree (void *  );

#define yy_new_buffer itex2MML_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        itex2MML_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            itex2MML_yy_create_buffer(itex2MML_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        itex2MML_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            itex2MML_yy_create_buffer(itex2MML_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define itex2MML_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *itex2MML_yyin = (FILE *) 0, *itex2MML_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int itex2MML_yylineno;

int itex2MML_yylineno = 1;

extern char *itex2MML_yytext;
#define yytext_ptr itex2MML_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up itex2MML_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	itex2MML_yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 666
#define YY_END_OF_BUFFER 667
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2519] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  627,  627,  667,    5,    4,    1,
        5,    5,  612,  611,  610,   75,   80,    6,   32,   84,
       41,   43,   82,   71,   73,   70,   69,   65,   38,   74,
       78,   76,   79,   37,   42,  612,   44,    8,    9,   81,
       11,   50,   12,   77,  666,  666,  639,  638,  638,  637,
      636,  635,  633,  634,  649,  648,  648,  647,  645,  646,
      644,  643,  643,  642,  640,  641,  632,  631,  631,  630,
      628,  629,  666,  655,  654,  654,  653,  651,  652,  660,

      659,  659,  658,  656,  657,  665,  664,  664,  663,  661,
      662,  666,  627,  666,    1,    0,    2,  611,    6,    0,
        0,    0,    0,    0,   85,    0,   38,   37,  599,   72,
       34,   35,   33,  591,  593,  595,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,   36,    7,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,   46,   52,   48,    0,   10,    0,
      613,  638,  648,  643,  631,    0,  650,  654,  653,  659,

      658,  664,  663,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  627,    0,    3,    0,    0,    0,  607,
        0,    0,    0,   86,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  444,  606,  606,  606,  606,  606,
      606,  169,  170,  606,  606,  606,  606,  606,  159,  148,
      606,  448,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  164,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  283,  273,  606,  253,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  252,  606,  606,  606,  606,
      606,  606,  606,  606,  284,  606,  132,  606,  606,  315,
      133,  606,  254,  606,  606,  606,  606,  606,  606,  371,
       98,  606,  606,  606,  474,  606,  309,  606,  606,  606,
      606,  606,   99,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  101,  606,  370,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606,  606,  606,  606,  190,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      447,  373,  100,  606,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  608,    0,    0,
        0,    0,   87,  606,  606,   17,  451,  606,  462,  606,
      606,  166,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  160,  161,  171,  606,  606,  606,  606,
      172,  606,  606,  606,  606,  606,  606,  606,  606,  515,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  121,  606,  606,  606,  606,  526,  606,  606,  606,

      606,  606,   15,  606,  606,  606,  391,  606,  606,  606,
      606,  248,  606,  606,  606,  106,  606,  606,  606,  606,
      606,  606,  122,  124,  126,  242,  606,  606,  606,  606,
      606,  606,  127,  606,  140,  606,  606,  128,  606,  389,
      606,  532,  606,  606,  606,  442,  606,  606,  573,  606,
      606,  606,  606,   93,  441,  606,  129,  606,  606,  606,
      606,  606,  606,  606,  141,  275,  274,  606,  606,  606,
      606,  606,  538,  606,  606,  130,  606,  606,  177,  606,
      606,  606,  606,  606,  142,  477,  606,  606,  606,  606,
      131,  606,  606,  606,  606,  606,  606,  285,  606,  606,

      458,  143,  606,  459,  606,  606,  606,  134,  606,  606,
      606,  606,  194,  606,  146,  606,  606,  173,  476,  147,
      469,  606,  606,  606,  606,  606,  606,  606,  472,  473,
      606,  606,  606,  606,  606,  423,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  116,  606,
      606,  606,  606,  606,  606,  107,  468,  606,  606,  606,
      606,  606,  606,  457,  102,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  135,  606,  606,  606,  606,  340,
      136,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  498,  149,  606,  606,  138,  104,
      606,  606,  606,  606,  606,  606,  606,  606,  424,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  530,  398,  606,  606,  606,
      606,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  609,    0,   31,    0,  606,  154,
       21,   24,   18,  606,  606,  606,  606,  606,  606,  167,
      606,  606,  606,  606,  606,  606,  606,  449,  606,  606,
      606,  606,  606,  606,  606,  606,  176,  606,  450,  606,
       51,  606,  606,  165,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606,  544,  606,  606,  606,   89,
      440,  606,  606,  606,  606,   19,   23,  606,   16,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  152,  606,  606,  456,  606,  606,
      606,  606,  606,  606,  347,  606,  606,  606,  123,  125,
      606,  606,  606,  211,  606,  606,  533,  606,  606,  606,
      606,   30,  606,  236,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  397,  606,  519,
      606,  606,  606,  276,  606,  606,  278,  606,  606,  606,
      606,  606,  606,  606,  443,  606,  606,  602,  606,  606,

      479,  606,  606,  606,  606,  606,  606,  606,   95,  606,
      606,  606,   59,  606,  606,  606,   13,  286,  606,  606,
      606,  606,  606,   28,  606,  293,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  316,  350,  319,
      606,  311,  606,  606,  606,  606,  606,  342,  606,  606,
      606,  606,  606,  606,  606,  606,  374,  485,  606,  606,
      606,  606,  606,  543,  606,  606,  518,  606,  270,  606,
      606,  606,  470,  265,  606,  499,  606,  606,  597,   63,
      606,  606,  606,  606,  606,   27,  547,  606,  606,  606,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      137,  606,  606,  606,  606,  606,  606,  606,  606,  546,
      606,  606,  606,  606,  489,  606,  606,  348,  606,  606,
      606,  139,  606,  549,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,   29,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,   49,  606,  606,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      625,    0,    0,    0,    0,  153,   26,   22,  606,  155,
      606,  606,  156,  606,  168,  606,  606,  606,  606,  174,

      507,  606,  606,  162,  606,  606,  163,  246,  606,  606,
      606,  336,  334,  606,  513,  439,  580,   88,  369,  426,
      606,  606,  606,  606,  575,  331,  606,  606,  606,  606,
      572,  606,  606,  606,  606,  606,  606,  606,   25,   20,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  521,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  238,
      606,  536,  606,  606,  606,  606,  606,  606,  606,  556,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  333,
      606,  239,   91,  606,  606,  606,  406,  606,  606,  606,
      606,  606,  606,  454,  606,  606,  606,  606,  354,  606,

      606,  606,  606,  606,  585,  356,   90,  606,  606,  279,
      281,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  481,  445,  606,  606,  606,   39,  606,  606,  606,
      446,   96,  606,  606,  606,   58,  237,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  294,  295,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  463,  606,  358,  204,  196,  606,  606,  606,
      317,  606,  320,  606,  322,  308,  310,  606,  438,  606,
      606,  349,  606,  606,  606,  206,  198,  491,  108,  606,

      606,  506,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  495,  606,  606,  606,  606,  606,   83,  606,  606,
      598,  606,  606,  606,   62,  606,   14,  606,  606,  606,
      606,  606,  606,  606,  208,  200,  606,  418,  606,  103,
      341,  570,  606,  343,  548,  606,  606,  381,  380,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  210,  202,  606,  606,  520,  606,   94,
      606,  606,  534,  488,  606,  606,  606,  240,  606,  244,
      461,  460,  213,  606,  606,  375,  606,  606,  335,  606,
      606,  606,  606,  112,  606,  606,  606,  606,  606,  337,

      241,  512,  606,  606,  606,  606,  606,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  247,
      243,  401,  606,  606,  606,  158,  606,  606,  606,  504,
      606,  386,  387,  606,  606,  606,  338,  330,  118,  119,
      120,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  250,  606,  245,  606,  606,  606,  606,  606,  606,
      606,  516,  606,  606,  606,  606,  606,  471,  332,  606,
      606,  606,  419,  402,  606,  403,  606,  606,  606,  606,
      606,  606,  606,  486,  606,  501,  606,  606,  421,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      216,  606,  606,  606,  408,  606,  606,  606,  455,  606,
      606,  606,  435,  606,  606,  606,  298,  606,  606,  606,
      297,  606,  606,  606,  606,  483,  606,  606,  606,  606,
      606,  517,   97,   60,   45,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,   57,  144,  145,  606,
      606,  606,  606,  388,  606,  193,  567,  565,  606,  569,
      563,  604,  566,  606,  606,  493,  339,  606,  606,  368,
      606,  606,  606,  606,  355,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  366,  367,  606,  606,  606,  606,
      503,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  313,  606,  606,  606,  606,  353,  606,   64,   47,
       61,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  390,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  452,   56,  606,  606,  258,  606,  606,
      606,  359,  606,  606,  606,  323,  606,  606,  522,  606,
      606,  606,  606,  606,  606,  497,  551,  606,  606,  606,
      606,  606,  606,  217,  606,  606,  606,  606,  606,  606,
      117,  606,  113,  606,  606,  606,  606,  606,  606,  606,
      606,  606,    0,    0,    0,    0,  621,    0,    0,    0,
        0,  624,    0,    0,  378,  606,  606,  606,  606,  606,

      606,  214,  606,  175,  606,  606,  606,  606,  256,  606,
      399,  400,  557,  606,  606,  372,  509,  606,  606,  606,
      429,  606,  606,  606,  606,  606,  606,  606,  606,  494,
      606,  606,  606,  606,  528,  606,  606,  606,  606,  590,
      606,  606,  606,  606,  606,  606,  422,  379,  157,  606,
      606,  606,  606,  606,  606,  606,  606,  151,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  301,
      606,  606,  606,  606,  606,  182,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  289,  606,  606,
      292,  303,  606,  606,  606,  431,  606,  571,  606,  606,

      606,  606,  606,  425,  203,  195,  606,  420,  606,  606,
      606,  314,  606,  606,  305,  365,  351,  205,  197,  150,
      606,  606,  606,  542,  586,  606,  467,  601,  606,  606,
      606,  606,  606,  415,  500,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  587,  589,  606,  207,  199,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  363,  606,  606,  209,
      201,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,   66,  606,  105,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  529,  606,  539,  606,  531,

        0,    0,    0,    0,    0,  614,    0,    0,    0,    0,
      606,  606,  606,  606,  606,  606,  606,  255,  606,  606,
      606,  606,  606,  606,  606,  508,  606,  510,  606,  511,
      514,  606,  606,  606,  606,  492,  496,  588,  606,  606,
      376,  577,  606,  584,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  407,  606,  606,  606,  606,  185,  453,
      606,  606,  606,  606,  606,  606,  606,  277,  280,  606,
      606,  606,  606,  606,  606,  606,  606,  606,   40,  478,
      606,  606,  606,  606,  606,  606,  287,  606,  606,  606,
      304,  606,  606,  606,  568,  606,  594,  410,  606,  600,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  527,
      266,  606,  606,  606,  606,  416,  606,  606,  606,  606,
      606,  606,  606,  579,  583,  606,  606,   53,  475,  606,
      606,  606,  606,  382,  384,  541,  606,  259,  606,  574,
      606,  606,  606,  364,  324,  606,  560,  606,  606,  606,
      394,  606,  606,  344,  606,  606,  606,  540,  606,  606,
      606,  111,  606,  606,  114,  606,  606,  115,  606,  606,
      617,  619,  622,  616,    0,  615,    0,  618,  626,  212,
      606,  181,  606,  606,  606,  606,  576,  606,  428,  257,
       54,  606,  554,  505,  606,  606,  606,  606,  606,  606,

      606,  578,  606,  502,  606,  606,  606,  606,  606,  606,
      606,  606,   67,  606,  606,  606,  606,  582,  581,  606,
      606,  552,  282,  299,  606,  302,  465,  606,  606,  180,
      606,  606,  189,  606,  606,  606,  606,  606,  290,  606,
      606,  606,  296,  606,  606,  318,  321,  267,  312,  606,
      306,  352,  606,  524,  411,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  377,
      606,  606,  606,  606,  260,  261,  606,  606,  606,  325,
      326,  559,  392,  606,  606,  592,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  395,  606,  606,  537,

      535,  623,    0,  606,  606,  606,  183,  606,  606,  606,
      606,  606,  606,  606,  564,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  271,  606,
      606,  606,  300,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  288,  291,  606,  606,  606,  606,  606,  307,
      606,  412,  606,  606,  606,  191,  606,  606,  606,  606,
      606,  606,  561,  606,  606,  606,  383,  385,  550,  262,
      360,  606,  606,  327,  606,  596,  606,  606,  606,  606,
      525,  606,  606,  222,  110,  396,  606,  606,    0,  606,
      606,  606,  218,  109,  555,  606,  606,  432,  606,  606,

      490,  606,  404,  405,  606,  606,  606,  606,  466,  606,
      606,  606,  215,  272,  606,  553,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  414,  413,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  362,  361,  393,  606,  606,  606,  606,
      606,   68,  606,  606,    0,  251,  606,  606,  606,  606,
      430,  606,  606,  606,  606,  606,  606,  606,  606,  558,
      606,  606,  606,  606,  606,  606,  249,  606,  606,  606,
      606,  606,  606,  606,  606,  523,  606,  603,  606,  606,
      606,  606,  606,  417,  606,  606,  606,  606,  345,  346,

      606,  606,  545,  263,  328,  620,  606,  606,  606,  436,
      433,  606,  606,  606,  606,  606,  225,  606,  606,  606,
      409,  184,  606,  606,  606,  606,  606,  606,  606,  187,
      606,  427,  606,  606,  606,  606,  606,  606,  606,  268,
       55,  606,  357,  606,  264,  329,  179,  606,  606,  606,
      606,  606,  606,  606,  227,  226,  480,  229,  186,  606,
      230,  192,  606,  219,  606,  188,  269,  606,  606,  606,
      606,  606,  606,  464,  482,  606,  437,  606,  234,  606,
      487,  606,  606,  231,  606,  606,  606,  223,  606,  220,
      606,  606,  606,  606,  235,  606,    0,    0,  606,  233,

      606,  224,  232,  562,  606,  434,  606,    0,    0,    0,
      605,  606,  484,  178,  228,  606,  221,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,    1,
       22,    1,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   31,   33,   34,   35,   36,   37,   38,
       31,   39,   40,   41,   42,   43,   44,   45,   31,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    2,    2,    2,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    1,    4,    1,
        5,    1,    1,    6,    6,    6,    6,    6,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    8,    1,    1,
        9,    1,    6,    6,    6,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    1,    1,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[2535] =
    {   0,
        0,    1,   49,    0, 2991, 2990,  131,    0,  213,    0,
      295,    0,  377,    0, 2989, 2988,  458,  461,  464,  467,
      470,  488, 2987, 2986, 3016, 3015, 3062, 3071, 3071, 3054,
     3023, 3012, 3071, 3056, 3071, 3071, 3071, 3050,  479, 3046,
     3071, 3071, 3071, 3071,    0, 3071,    1, 3071,    6, 3071,
     3071, 3071, 3071,    0, 3071,  565, 3071, 3071, 3071, 3071,
      494, 3071, 3071, 3071, 3071, 2974, 3071,    7,   10, 3071,
     3071, 3071, 3071, 3071, 3071,   28,   31, 3071, 3071, 3071,
     3071,   34,   37, 3071, 3071, 3071, 3071,   40,   43, 3071,
     3071, 3071, 2973, 3071,  491,  497, 3034, 3071, 3071, 3071,

      500,  506, 3033, 3071, 3071, 3071,  509,  512, 3032, 3071,
     3071,  622,    0, 2993, 3071, 3020, 3071, 3046, 3071,  457,
     3026,  454,  457,  458, 3036,    7,  508,    0, 3071, 3071,
     3071, 3071, 3071, 3071, 3071, 3071, 2981,  474,    0,  469,
     2972, 2990,  452, 2989,  497, 2968, 2967,  416,  591,  496,
      504,  502,  492,  626, 2982, 2977, 2980, 3071, 3071,  602,
      638,  653,  666,  672,  648,  690,  698,  692, 2971,  481,
      716,  732,  763,  660,  782,  509,  743,  794,  815,  753,
      632,  813, 2974, 2977, 3071, 3071, 3071,  613, 3071, 2952,
     3071,  652,  809,  875,  884, 2951, 3071,  887, 3012,  890,

     3011,  893, 3010, 2963, 2962, 2962, 2960, 2971, 2970, 2969,
     2956,  595, 2955,    0, 2953, 3071,  540,    0, 2997, 3071,
      507,  461,  523, 3007, 2948, 2943, 2955, 2937, 2947, 2947,
     2957, 2934, 2955, 2942,    0, 2934, 2933, 2936, 2938, 2944,
     2935,    0,    0, 2943, 2935, 2937, 2927, 2935,    0,    0,
     2934,    0, 2927, 2934, 2933,  596, 2918, 2933, 2928,  707,
     2935, 2934, 2933,  506, 2929, 2928,    0, 2911,  674, 2929,
     2922, 2912,  732, 2902, 2911,  616,  785,  528,  695, 2924,
      834,  441, 2908, 2908, 2910,  647, 2903,  514,  836, 2917,
      711,  755,  625,  852,  860, 2918,  842, 2902, 2905,  630,

     2912, 2896,  777,  811,  844, 2902, 2905, 2911, 2893,  741,
     2897, 2905, 2891, 2900,  865, 2888, 2900, 2884, 2902, 2901,
      719, 2896, 2894,  795,  792,  865, 2879, 2897, 2881, 2878,
      592, 2877, 2889, 2878,  869, 2880,    0, 2887, 2877,  868,
      873,  869, 2880, 2883,  873,  890, 2872,  767, 2882,    0,
     2873, 2909,  879, 2868,  905,  827,    0, 2877, 2872, 2860,
      676,  892,    0,  739,  918,  895, 2865,  893,  899, 2869,
     2872,  899, 2858,  906, 2855, 2853, 2858,  909, 2863, 2867,
     2849, 2868, 2854, 2849, 2861, 2853,  901,  770, 2863,  905,
     2854, 2844,  936,  908,  918, 2860,  925,  932,  924, 2848,

     2858,  933,  949,  927,  930, 2840,  942,  940,  948, 2848,
     2841, 2854,  953,  957, 2853, 2835,  958,  963, 2848, 2847,
        0,    0,    0, 2830, 2848, 2847, 2838, 2845, 2826, 2824,
     2823, 2841, 2840, 2828, 2832, 2837, 2833, 3071, 2867,  969,
     2866,  991, 3071, 2826, 2832,  965,    0, 2816, 2811, 2817,
     2815,    0, 2815, 2822, 2825, 2809, 2822, 2803, 2815, 2814,
     2799, 2806, 2802,    0,    0,    0, 2809, 2803, 2796, 2795,
        0, 2793, 2797, 2793, 2795, 2800, 2789, 2789, 2787,    0,
     2785, 2803, 2796, 2801, 2785, 2793, 2791, 2786, 2785, 2778,
      960,    0, 2794, 2781, 2777, 2781,    0, 2790, 2781,  966,

     2774, 2779,  979, 2772, 2783, 2781, 2764, 2763,  972, 2770,
     2765,    0, 2760, 2767, 2775,    0, 2774, 2757, 2773,  992,
      996, 2756, 2765, 2764,    0,    0,  996, 2764, 2752, 2761,
     2761, 2747,    0, 2746,    0, 2752, 2763,    0, 2747,    0,
     2746,  990, 2759, 2746, 2758,    0, 2753, 2737,    0, 2747,
     2746, 2742, 1011,    0,    0, 2734,    0, 2740, 2742, 2730,
     2748, 1010, 2725, 2734,    0,  832,    0, 2730, 2728, 2735,
     1020, 2725,    0, 2724, 2723,    0, 2729, 2733,    0,  961,
     2718, 2717, 2724, 2723, 1006, 2729, 2732, 2731, 2711, 2714,
        0, 2727, 2721, 2726, 2717, 2705, 2704, 1000, 2704, 2707,

        0, 1018, 2705,    0, 2704, 2702, 2709,    0, 2710, 2711,
     2702, 2696, 2694, 2704,    0, 2692, 2691,    0,    0, 2688,
     2703, 2687, 2705, 2693, 2683, 2689, 2684, 2683, 2681, 2678,
     2689, 2680, 2678, 1011, 2691, 1020, 2676, 2688, 2677, 2678,
     1033, 2689, 2688, 2670, 2669, 2667, 2665, 2664, 2676, 2679,
     2663, 2659, 2666, 2660, 2673, 1013, 2660, 2661,    0, 2671,
     2654, 2668, 2668, 2657, 1006,    0,    0, 2668, 2664, 2660,
     2665, 2656, 2649,    0,    0, 2655, 2653, 2645, 2640, 1039,
     2646, 2649, 2639, 2638,    0, 2642, 2636, 2635, 2639, 2646,
     2642, 2630, 2636, 2635, 1038, 2641, 1042, 2625, 2623, 2642,

     2641, 1035, 2622, 2637,    0, 2620, 2620, 2619, 2628,    0,
     2616, 2614, 2632, 1026, 1042, 2628, 2626, 2623,    0, 1046,
     2609, 2612, 2622, 2611, 2617, 2616, 2605, 1049, 2601, 2612,
     2604, 2600, 1054, 2599, 2597,    0,    0, 2596, 2608, 2609,
     2612, 2592, 2591, 2603, 2589, 2603, 2599, 2588, 2585, 2592,
     2594, 2573, 2581, 2573, 3071, 1079, 3071, 1083, 2598,    0,
      978,    0,    0, 2593, 2596, 2581, 2594, 2593, 2575,    0,
     2591, 2587, 1059, 2578, 2588, 2569, 2582,    0, 2566, 2584,
     2579, 2578, 2581, 2567, 2562, 2556, 2566, 2569,    0, 2568,
        0, 2556, 2569,    0, 2565, 2558, 2570, 2563, 2564, 2553,

     2552, 2557, 2564, 2539, 2547,    0, 1062, 2541, 2547,    0,
        0, 2555, 2547, 1054, 1070, 1057,    0, 1072,    0, 1063,
     2540, 2541, 2551, 2550, 2541, 2542, 2533, 2536, 2541, 2540,
     2536, 2538, 2541, 2540, 2525, 2528, 2531, 1077, 2520, 2521,
     2527, 1085, 2520, 2502,    0, 2499, 2492, 2473,    0,    0,
     2456, 2473, 2472,    0, 1078, 2413, 2400, 2417, 2402, 2403,
     2403,    0, 2397,    0, 2401, 1083, 2394, 2407, 2385,  423,
      509,  559,  585,  605,  631,  706, 1091,    0,  816,    0,
      925,  973, 1056,    0, 1073, 1079, 1082, 1088, 1086, 1090,
     1089, 1102, 1099, 1089,    0, 1090, 1099,    0, 1098, 1093,

        0, 1106, 1106, 1095, 1104, 1094, 1113, 1108,    0, 1114,
     1122, 1120, 1113, 1123, 1115, 1109, 1128,    0, 1118, 1131,
     1118, 1120, 1116,    0, 1123, 1124, 1129, 1131, 1130, 1140,
     1131, 1132, 1151, 1134, 1140, 1139, 1147, 1152, 1143, 1162,
     1146, 1158, 1149, 1150, 1154, 1162, 1153, 1156,    0, 1157,
     1158,    0, 1164, 1170, 1179, 1178, 1164,    0, 1164, 1181,
     1166, 1167, 1168, 1170, 1171, 1182,    0,    0, 1190, 1174,
     1192, 1175, 1190, 1194, 1188, 1186,    0, 1190,    0, 1180,
     1193, 1200,    0, 1202, 1199, 1187, 1189, 1206, 1193, 1200,
     1211, 1203, 1202, 1198, 1205,    0,    0, 1208, 1213, 1207,

     1208, 1220, 1210, 1209, 1210, 1220, 1214, 1211, 1231, 1216,
        0, 1226, 1223, 1231, 1232, 1233, 1221, 1224, 1225,    0,
     1240, 1225, 1225, 1234,    0, 1225, 1242, 1247, 1244, 1233,
     1235,    0, 1239, 1236, 1254, 1253, 1258, 1249, 1244, 1259,
     1246, 1255, 1254, 1257, 1251,    0, 1253, 1258, 1269, 1270,
     1257, 1258, 1254, 1259, 1267, 1279, 1273, 1266, 1282, 1269,
     1277, 1279, 1279, 1281, 1282, 1272,    0, 1287, 1291,    0,
     1278, 1279, 1284, 1283, 1283, 1298, 1295, 1287, 1294, 1287,
     3071, 1290, 1290, 1341, 1343,    0,    0,    0, 1297,    0,
     1301, 1298,    0, 1298,    0, 1317, 1301, 1311, 1316,    0,

        0, 1303, 1322,    0, 1304, 1305,    0,    0, 1311, 1313,
     1313,    0,    0, 1321,    0,    0,    0,    0,    0,    0,
     1306, 1312, 1318, 1319, 1319,    0, 1319, 1318, 1328, 1319,
        0, 1334, 1326, 1334, 1334, 1328, 1327, 1330,    0,    0,
     1332, 1336, 1340, 1347, 1350, 1343, 1341, 1349, 1351,    0,
     1344, 1332, 1345, 1354, 1346, 1340, 1349, 1345, 1349,    0,
     1351,    0, 1351, 1364, 1352, 1350, 1363, 1348, 1360,    0,
     1374, 1356, 1356, 1374, 1374, 1379, 1363, 1377, 1374,    0,
     1379,    0,    0, 1371, 1373, 1386, 1384, 1384, 1372, 1376,
     1376, 1375, 1375, 1376, 1381, 1394, 1384, 1396,    0, 1381,

     1387, 1394, 1394, 1392,    0,    0,    0, 1404, 1388,    0,
        0, 1391, 1388, 1398, 1390, 1398, 1398, 1394, 1411, 1408,
     1398,    0,    0, 1414, 1416, 1412,    0, 1404, 1404, 1408,
        0,    0, 1424, 1421, 1422,    0,    0, 1410, 1424, 1421,
     1414, 1417, 1432, 1418, 1420, 1419, 1417, 1429, 1421, 1434,
     1425, 1424,    0,    0, 1438, 1435, 1438, 1427, 1433, 1433,
     1447, 1449, 1433, 1432, 1438, 1442, 1438, 1456, 1456, 1440,
     1447, 1453,    0, 1461,    0, 1448, 1449, 1464, 1445, 1448,
        0, 1457,    0, 1458,    0,    0,    0, 1459, 1467, 1453,
     1469, 1470, 1471, 1469, 1470, 1464, 1465,    0,    0, 1466,

     1462,    0, 1464, 1466, 1476, 1481, 1473, 1476, 1488, 1475,
     1485,    0, 1476, 1472, 1477, 1494, 1487,    0, 1494, 1483,
        0, 1478, 1495, 1496,    0, 1484, 1502, 1497, 1496, 1492,
     1487, 1507, 1490, 1490, 1496, 1497, 1501,    0, 1503,    0,
        0,    0, 1498,    0,    0, 1499, 1514,    0,    0, 1505,
     1506, 1521, 1519, 1510, 1510, 1510, 1530, 1516, 1512, 1517,
     1534, 1527, 1517, 1523, 1524, 1522, 1532,    0, 1536,    0,
     1542, 1528,    0, 1543, 1541, 1540, 1543,    0, 1547,    0,
        0,    0, 1535, 1533, 1540,    0, 1540, 1538,    0, 1538,
     1542, 1539, 1551,    0, 1548, 1549, 1558, 1565, 1563,    0,

        0,    0, 1568, 1562, 1570, 1563, 1568, 1565, 1566, 1571,
     1568, 1549, 1561, 1556, 1573, 1570, 1555, 1576, 1564, 3071,
     3071,    0, 1583, 1570, 1584,    0, 1572, 1584, 1586,    0,
     1575,    0,    0, 1571, 1594, 1582,    0, 1592,    0,    0,
        0, 1582, 1580, 1591, 1588, 1601, 1598, 1590, 1587, 1594,
     1600,    0, 1605,    0, 1589, 1589, 1598, 1591, 1595, 1613,
     1594,    0, 1609, 1602, 1601, 1601, 1607,    0,    0, 1600,
     1603, 1618,    0,    0, 1604,    0, 1624, 1621, 1618, 1622,
     1615, 1626, 1618,    0, 1615, 1613, 1618, 1618,    0, 1631,
     1631, 1621, 1636, 1640, 1617, 1628, 1635, 1627, 1623, 1646,

        0, 1639, 1644, 1636,    0, 1631, 1637, 1638,    0, 1647,
     1643, 1649,    0, 1643, 1643, 1641,    0, 1655, 1649, 1643,
        0, 1658, 1643, 1659, 1659,    0, 1663, 1663, 1649, 1669,
     1666,    0,    0,    0,    0, 1654, 1667, 1667, 1654, 1658,
     1663, 1662, 1659, 1673, 1663, 1670,    0,    0,    0, 1669,
     1679, 1679, 1682,    0, 1683,    0,    0,    0, 1677, 1690,
        0,    0,    0, 1687, 1690,    0,    0, 1693, 1692,    0,
     1684, 1674, 1675, 1696,    0, 1681, 1700, 1701, 1691, 1687,
     1692, 1686, 1690, 1689,    0,    0, 1687, 1688, 1698, 1698,
        0, 1713, 1701, 1696, 1710, 1713, 1707, 1707, 1706, 1706,

     1705,    0, 1708, 1716, 1713, 1707,    0, 1712,    0,    0,
        0, 1711, 1725, 1722, 1715, 1718, 1730, 1728, 1731, 1718,
     1724,    0, 1720, 1717, 1718, 1721, 1734, 1743, 1740, 1725,
     1744, 1743, 1744,    0,    0, 1745, 1739, 1747, 1750, 1738,
     1737,    0, 1740, 1748, 1745, 1754, 1737, 1739,    0, 1737,
     1739, 1750, 1750, 1758, 1768,    0,    0, 1758, 1762, 1754,
     1751, 1770, 1753,    0, 1776, 1764, 1761, 1771, 1765, 1774,
        0, 1767,    0, 1771, 1766, 1767, 1767, 1770, 1784, 1770,
     1779, 1789, 1769, 1770, 1791, 1772, 3071, 1792, 1769, 1775,
     1799, 3071, 1777, 1795,    0, 1788, 1801, 1790, 1798, 1787,

     1790,    0, 1791,    0, 1793, 1791, 1803, 1800, 1809, 1796,
        0,    0,    0, 1807, 1809,    0,    0, 1799, 1814, 1804,
        0, 1807, 1803, 1818, 1798, 1804, 1817, 1825, 1809,    0,
     1810, 1811, 1813, 1828,    0, 1813, 1820, 1814, 1817,    0,
     1828, 1835, 1823, 1822, 1821, 1835,    0, 1825,    0, 1826,
     1826, 1833, 1833, 1835, 1832, 1837, 1832,    0, 1846, 1842,
     1832, 1852, 1848, 1851, 1840, 1837, 1847, 1844, 1859,    0,
     1848, 1857, 1847, 1860, 1867,    0, 1863, 1846, 1860, 1870,
     1859, 1855, 1868, 1868, 1869, 1859, 1862,    0, 1861, 1875,
        0,    0, 1859, 1864, 1877,    0, 1869,    0, 1876, 1884,

     1884, 1874, 1873,    0,    0,    0, 1887,    0, 1879, 1880,
     1890,    0, 1887, 1896, 1893,    0, 1894,    0,    0,    0,
     1882, 1898, 1897,    0,    0, 1891,    0,    0, 1886, 1887,
     1894, 1891, 1895,    0,    0, 1897, 1892, 1905, 1905, 1892,
     1902, 1900, 1902, 1898,    0,    0, 1915,    0,    0, 1900,
     1916, 1903, 1902, 1914, 1924, 1906, 1907, 1916, 1920, 1913,
     1926, 1921, 1915, 1922, 1919, 1923,    0, 1920, 1933,    0,
        0, 1934, 1928, 1923, 1926, 1930, 1943, 1942, 1941, 1933,
     1947, 1944, 1930,    0, 1933,    0, 1937, 1941, 1953, 1946,
     1936, 1956, 1953, 1954, 1959,    0, 1958,    0, 1958,    0,

     1934, 1935, 1936, 1937, 1963, 3071, 1939, 1949, 1941, 1942,
     1949, 1953, 1951, 1955, 1958, 1962, 1960,    0, 1960, 1968,
     1976, 1965, 1975, 1977, 1965,    0, 1967,    0, 1980,    0,
        0, 1983, 1988, 1989, 1976,    0,    0,    0, 1974, 1992,
        0,    0, 1974,    0, 1981, 1976, 1979, 1977, 1984, 1999,
     1981, 1981, 1983,    0, 1984, 1982, 2005, 1989,    0,    0,
     1988, 2004, 1991, 1992, 1997, 2006, 1994,    0,    0, 1991,
     1997, 1998, 2001, 1999, 2019, 2001, 1997, 2005,    0,    0,
     2004, 2002, 2025, 2007, 2021, 2022,    0, 2015, 2013, 2012,
        0, 2032, 2014, 2018,    0, 2035,    0,    0, 2028,    0,

     2018, 2019, 2028, 2037, 2024, 2026, 2027, 2031, 2041,    0,
        0, 2036, 2033, 2024, 2032,    0, 2046, 2037, 2033, 2046,
     2046, 2051, 2037,    0,    0, 2040, 2033,    0,    0, 2059,
     2048, 2042, 2051, 2059, 2060,    0, 2052, 2050, 2051,    0,
     2054, 2045, 2053,    0, 2055, 2056,    0, 2069, 2070, 2058,
        0, 2074, 2073, 2075, 2060, 2078, 2064,    0, 2065, 2061,
     2070,    0, 2072, 2073,    0, 2069, 2070,    0, 2080, 2087,
     3071, 3071, 3071, 3071, 2065, 3071, 2077, 3071, 3071,    0,
     2087,    0, 2096, 2089, 2076, 2085,    0, 2086,    0,    0,
        0, 2094,    0,    0, 2091, 2090, 2087, 2092, 2095, 2093,

     2090,    0, 2090,    0, 2106, 2109, 2090, 2096, 2114, 2107,
     2092, 2113,    0, 2101, 2105, 2103, 2103,    0,    0, 2103,
     2116,    0,    0,    0, 2106,    0,    0, 2108, 2126,    0,
     2127, 2120,    0, 2112, 2130, 2131, 2125, 2110,    0, 2117,
     2118, 2136,    0, 2124, 2123,    0,    0,    0,    0, 2139,
     2124,    0, 2141,    0,    0, 2119, 2139, 2130, 2137, 2124,
     2147, 2130, 2144, 2146, 2134, 2145, 2150, 2144, 2148,    0,
     2157, 2142, 2143, 2156,    0, 2145, 2139, 2159, 2150,    0,
     2149,    0,    0, 2152, 2163,    0, 2154, 2165, 2162, 2167,
     2168, 2155, 2160, 2157, 2163, 2171,    0, 2165, 2166,    0,

        0, 3071, 2172, 2167, 2165, 2177,    0, 2162, 2172, 2167,
     2183, 2182, 2185, 2184,    0, 2169, 2185, 2189, 2192, 2193,
     2195, 2180, 2181, 2180, 2189, 2195, 2185, 2181,    0, 2186,
     2187, 2188,    0, 2191, 2192, 2195, 2197, 2195, 2196, 2198,
     2198, 2197,    0,    0, 2200, 2201, 2213, 2201, 2210,    0,
     2210,    0, 2207, 2201, 2212,    0, 2209, 2227, 2228, 2210,
     2226, 2216,    0, 2221, 2220, 2221,    0,    0,    0,    0,
        0, 2219, 2213,    0, 2214,    0, 2216, 2234, 2234, 2235,
        0, 2238, 2221,    0,    0,    0, 2240, 2241, 2223, 2234,
     2231, 2242,    0,    0,    0, 2247, 2247,    0, 2241, 2242,

        0, 2248,    0,    0, 2241, 2252, 2243, 2241,    0, 2256,
     2244, 2248,    0,    0, 2259,    0, 2250, 2248, 2259, 2255,
     2255, 2253, 2251, 2255, 2273, 2260, 2258, 2265, 2259, 2267,
     2275,    0,    0, 2261, 2264, 2265, 2266, 2284, 2269, 2267,
     2283, 2268, 2283,    0,    0,    0, 2277, 2272, 2285, 2276,
     2275,    0, 2279, 2280, 2269,    0, 2284, 2280, 2286, 2286,
        0, 2298, 2299, 2296, 2288, 2287, 2302, 2286, 2295,    0,
     2310, 2289, 2296, 2291, 2300, 2307,    0, 2294, 2303, 2310,
     2305, 2303, 2299, 2308, 2319,    0, 2320,    0, 2321, 2312,
     2310, 2311, 2312,    0, 2312, 2320, 2314, 2322,    0,    0,

     2315, 2335,    0, 2320, 2321, 3071, 2316, 2339, 2318,    0,
     2338, 2337, 2337, 2344, 2328, 2327,    0, 2325, 2337, 2331,
        0,    0, 2328, 2349, 2334, 2331, 2348, 2333, 2339,    0,
     2335,    0, 2347, 2353, 2338, 2347, 2348, 2346, 2356,    0,
        0, 2361,    0, 2355,    0,    0,    0, 2350, 2355, 2355,
     2351, 2364, 2361, 2365,    0,    0,    0,    0,    0, 2356,
        0, 2357, 2376,    0, 2363,    0,    0, 2361, 2361, 2358,
     2359, 2368, 2358,    0,    0, 2367,    0, 2363,    0, 2367,
        0, 2381, 2394,    0, 2372, 2368, 2391,    0, 2374,    0,
     2371, 2390, 2381, 2383,    0, 2390, 2402, 2371, 2383,    0,

     2390,    0,    0,    0, 2380,    0, 2384, 2408, 2379, 2378,
     3071, 2393,    0,    0,    0, 2386,    0, 3071, 2473, 2482,
     2491, 2500, 2509, 2518, 2525, 2529, 2535, 2542, 2551, 2557,
     2561, 2565, 2571, 2580
    } ;

static yyconst flex_int16_t yy_def[2535] =
    {   0,
     2519, 2519, 2518,    3, 2520, 2520, 2518,    7, 2518,    9,
     2518,   11, 2518,   13, 2520, 2520, 2521, 2521, 2522, 2522,
     2523, 2523, 2520, 2520, 2524, 2524, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2525, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2526, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2527, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2528, 2518, 2518, 2518, 2518, 2518, 2518, 2518,

     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2529, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2530, 2530, 2530, 2530, 2518, 2518, 2518, 2526, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2518, 2518, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2518, 2518, 2518, 2518, 2518, 2527,
     2518, 2518, 2518, 2518, 2518, 2528, 2518, 2518, 2518, 2518,

     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2529, 2518, 2518, 2518, 2532, 2530, 2518,
     2530, 2530, 2530, 2518, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2532, 2530,
     2530, 2530, 2518, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2530, 2518, 2530, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2530, 2530, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2518, 2518, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2518, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2518, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2518, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2533, 2534, 2531, 2531,

     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2533, 2518, 2534,
     2518, 2531, 2531, 2531, 2531, 2531, 2531,    0, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518
    } ;

static yyconst flex_int16_t yy_nxt[3154] =
    {   0,
     2518, 2518,   29,   29, 2518, 2518,   30,   30,  192,  192,
      192,  192,  192,  192,  126,  126,  126,  126,  127,  127,
      126,  126,  126,  126,  127,  127, 2518,   31,   31,  193,
      193,  193,  193,  193,  193,  194,  194,  194,  194,  194,
      194,  195,  195,  195,  195,  195,  195,   32,   32,   33,
       34,   35,   33,   36,   37,   38,   33,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   55,   56,   57,   58,   59,

       60,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   61,   62,   63,
       64,   67,   68,   69,   68,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   70,
       67,   67,   67,   67,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   67,   67,   67,
       67,   67,   67,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   73,
       67,   74,   67,   75,   76,   77,   76,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   75,
       75,   75,   75,   75,   75,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   79,   75,   80,   75,   81,   82,   83,   82,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   81,   81,   81,   81,   81,   81,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   85,   81,   86,   81,   87,   88,   89,
       88,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   87,   87,   87,   87,   87,   87,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   91,   87,   92,   87,   95,
       96,   95,   95,   96,   95,  101,  102,  101,  101,  102,
      101,  107,  108,  107,  220,  217,   97,  220,  220,   97,
      244,  220,  103,  245,  120,  103, 1195,  246,  109,  107,
      108,  107,  198,  198,  198,  188,  188,  188,  198,  198,

      198,  200,  200,  200,  510,  511,  109,  200,  200,  200,
      202,  202,  202,  202,  202,  202,  235,  236,  237,  221,
      122,  222,  126,  223,  126,  230,  127,  220,  441,  231,
      226,  123,  218,  329,  227,  232,   98,  330,   99,   98,
      228,   99,  104,  220,  105,  104,  229,  105,  110,  239,
      111,  124,  252,  240,  257,  253,  254,  259,  217,  260,
      438,  258,  480,  241,  255,  380,  110,  440,  111,  129,
      130,  131,  132,  133,  189,  481,  256,  381, 1196,  134,
      518,  382,  501,  442,  135,  136,  519,  502,  137,  138,
      139,  140,  141,  139,  142,  139,  143,  144,  145,  146,

      147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
      157, 1197,  158,  159,  188,  188,  188,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
      183,  139,  184,  185,  186,  187,  204,  247, 1198,  469,
      248,  249,  261,  192,  192,  192,  592,  593,  415,  433,
      250,  251,  434,  470,  205,  269,  270,  271,  435,  272,
      496,  273,  274,  275,  206,  207,  208,  531, 1199,  262,
      209,  263,  264,  547,  416,  497,  210,  417,  418,  211,
      276,  532,  212,  189,  277,  213,  278,  548,  279,  265,

      306,  280, 1200,  515,  281,  283,  307,  516,  284,  285,
      282,  308,  286,  287,  309,  366,  288,  310,  292,  289,
      367,  293,  294,  290,  368,  291,  295,  369,  637,  296,
      485,  370,  297,  371,  486,  299,  300,  301,  298,  302,
      303,  487,  311,  304,  312,  638,  313,  305,  314,  323,
      318,  319,  324,  503,  320,  315,  325,  326,  327,  474,
      504,  316,  475,  317,  321,  642, 1201,  322,  331,  332,
      333,  334,  335,  336,  337,  338,  339,  476,  526,  340,
      527,  341,  342,  576,  345,  577,  491,  343,  346,  344,
      492,  347,  348,  562,  643,  383,  384,  385,  349,  350,

      386,  493,  387,  388,  351,  352,  389,  563,  411,  390,
      193,  193,  193,  528,  391,  353,  412,  354,  413,  355,
      414,  356,  619,  357,  529,  530,  358,  359,  676,  360,
      361,  551,  620,  362,  372,  363,  364,  365,  373,  498,
      677,  374,  375,  499,  582,  376,  377,  552,  392,  553,
      393,  378,  379,  394,  395,  580,  500,  396,  397,  583,
      581,  398,  399,  554,  400,  401,  402,  404,  403,  419,
      555,  405,  406,  420,  407,  408,  194,  194,  194, 1204,
      421,  409,  422,  632,  410,  195,  195,  195,  198,  198,
      198,  200,  200,  200,  202,  202,  202,  506,  633,  520,

      884,  521,  885,  522,  556,  507,  523,  524,  508,  509,
      533,  557,  536,  542,  543,  534,  544,  568,  537,  584,
      603,  569,  585,  535,  538,  605,  597,  608,  627,  606,
      539,  604,  624,  540,  609,  570,  586,  598,  587,  599,
      613,  644,  616,  607,  614,  617,  610,  646,  615,  649,
      625,  639,  640,  650,  655,  651,  674,  628,  658,  683,
      687,  647,  652,  629,  641,  663,  659,  675,  656,  664,
      645,  679,  707,  630,  688,  665,  689,  693,  697,  680,
      631, 1205,  690,  691,  695,  694,  703,  704,  684,  220,
      685,  696,  709,  698,  699,  711,  700,  705,  714,  710,

      706,  708,  715,  716,  717,  712,  718,  686,  723,  727,
      734,  220,  728,  724,  801,  719,  725,  736,  810,  737,
      729,  899,  726,  761,  735,  811,  900,  730,  762,  731,
      802,  803,  738,  815,  763,  756,  830,  816, 1206,  831,
      812, 1087,  817,  832,  841,  818,  863, 1088,  819,  820,
      821,  822,  823,  824,  845,  842,  846,  758,  843,  851,
      864,  986,  844,  873,  880,  976,  905,  847,  918,  852,
      919,  874,  889,  987,  881,  890,  891,  906,  922,  950,
      953,  951,  977,  892,  978,  954,  959,  960,  923, 1024,
      893,  998, 1015, 1016, 1018, 1036, 1038, 1037, 1043,  220,

      961, 1052,  999,  220, 1025, 1000, 1026, 1039, 1207, 1001,
     1058, 1097, 1134, 1044, 1019, 1053, 1059, 1135, 1127, 1060,
     1139, 1061, 1136, 1062, 1063, 1064, 1140, 1141, 1098, 1128,
     1137, 1144, 1129, 1163, 1145, 1189, 1208, 1168, 1190, 1142,
     1164, 1178, 1138, 1143, 1084, 1169, 1209, 1179, 1085, 1202,
     1210, 1180, 1211, 1212, 1203, 1191, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1220, 1226,
     1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
     1238, 1243, 1229, 1244, 1249, 1250, 1245, 1246, 1251, 1247,
     1252, 1239, 1253, 1254, 1255, 1257, 1258, 1240, 1241, 1242,

     1256, 1248, 1259, 1260, 1261, 1262, 1267, 1268, 1263, 1269,
     1270, 1264, 1271, 1272, 1273, 1274, 1275, 1265, 1276, 1277,
     1266, 1278, 1279, 1280, 1281, 1283, 1282, 1284, 1285, 1286,
     1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
     1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1307, 1308,
     1309, 1310, 1311, 1312, 1313, 1318, 1314, 1305, 1315, 1319,
     1320, 1321, 1322, 1323, 1306, 1324, 1325, 1316, 1326, 1327,
     1328, 1329, 1317, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1358,

     1363, 1359, 1364, 1360, 1365, 1366, 1367, 1351, 1368, 1369,
     1370, 1371, 1361, 1357, 1372, 1373, 1374, 1362, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397,
     1399, 1400, 1401, 1402, 1403, 1404, 1395, 1408, 1409, 1410,
     1405, 1398, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1419, 1420, 1406, 1421, 1407, 1422, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
     1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1447,
     1448, 1446, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,

     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1467, 1468,
     1469, 1470, 1471, 1472, 1465, 1466, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
     1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
     1507, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1520, 1518, 1521, 1522, 1523, 1508, 1519, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
     1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
     1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,

     1557, 1559, 1560, 1561, 1558, 1562, 1563, 1564, 1565, 1566,
     1567, 1568, 1570, 1571, 1572, 1573, 1574, 1569, 1575, 1576,
     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1601, 1602, 1603, 1605, 1606, 1607,
     1608, 1609, 1610, 1611, 1612, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1625, 1604, 1613, 1626, 1627, 1629, 1630,
     1628, 1614, 1615, 1616, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1643, 1645, 1646, 1647,
     1648, 1649, 1650, 1652, 1653, 1655, 1656, 1657, 1658, 1659,

     1660, 1663, 1664, 1651, 1644, 1665, 1666, 1667, 1668, 1669,
     1670, 1671, 1654, 1661, 1672, 1673, 1674, 1662, 1675, 1677,
     1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1688, 1689, 1676, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
     1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
     1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
     1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
     1727, 1728, 1729, 1730, 1731, 1732, 1733, 1735, 1736, 1734,
     1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
     1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,

     1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
     1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
     1788, 1789, 1791, 1776, 1792, 1793, 1794, 1795, 1796, 1797,
     1798, 1790, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
     1807, 1808, 1809, 1810, 1811, 1812, 1813, 1815, 1816, 1814,
     1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
     1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
     1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
     1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,

     1857, 1858, 1859, 1860, 1862, 1863, 1864, 1865, 1866, 1867,
     1868, 1870, 1861, 1871, 1872, 1873, 1874, 1875, 1876, 1869,
     1878, 1879, 1880, 1881, 1882, 1877, 1883, 1884, 1885, 1886,
     1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
     1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
     1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
     1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
     1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
     1947, 1949, 1950, 1948, 1951, 1952, 1953, 1954, 1955, 1956,

     1957, 1958, 1959, 1960, 1961, 1963, 1964, 1965, 1966, 1962,
     1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
     1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
     1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
     1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
     2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
     2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
     2028, 2029, 2030, 2031, 2032, 2027, 2033, 2034, 2035, 2036,
     2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
     2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,

     2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
     2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
     2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
     2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
     2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
     2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
     2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
     2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156,

     2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
     2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
     2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
     2187, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2188, 2197,
     2198, 2199, 2200, 2201, 2189, 2202, 2203, 2204, 2205, 2206,
     2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
     2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236,
     2237, 2238, 2239, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
     2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257,

     2240, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266,
     2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,
     2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286,
     2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296,
     2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2307,
     2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2306, 2316,
     2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326,
     2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336,
     2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,

     2357, 2358, 2359, 2361, 2362, 2363, 2365, 2366, 2367, 2368,
     2369, 2364, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2360,
     2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386,
     2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396,
     2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,
     2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,
     2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426,
     2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436,
     2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446,
     2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456,

     2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466,
     2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476,
     2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486,
     2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496,
     2497, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507,
     2509, 2511, 2512, 2513, 2514, 2515, 2509, 2498, 2511, 2516,
     2517, 1194, 1193, 1192, 1188, 1187, 1186, 1185, 1184, 1183,
     1182, 1181, 2498,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   94,   94,   94,   94,   94,   94,   94,   94,   94,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  121, 1177, 1176,
      121,  121, 1175,  121,  128,  128,  190,  190,  190, 1174,
      190,  190,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  214,  214,  214,  214,  214,  214,  214, 1173,  214,
      219,  219,  219,  219, 1172,  219,  139,  139,  439, 1171,
      439, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 1170,
     1167, 1166, 1165, 1162, 1161, 1160, 1159, 1158, 1157, 1156,

     1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146,
     1133, 1132, 1131, 1130, 1126, 1125, 1124, 1123, 1122, 1121,
     1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111,
     1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101,
     1100, 1099, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089,
     1086, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075,
     1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065,
     1057, 1056, 1055, 1054, 1051, 1050, 1049, 1048, 1047, 1046,
     1045, 1042, 1041, 1040, 1035, 1034, 1033, 1032, 1031, 1030,
     1029, 1028, 1027, 1023, 1022, 1021, 1020, 1017, 1014, 1013,

     1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003,
     1002,  997,  996,  995,  994,  993,  992,  991,  990,  989,
      988,  985,  984,  983,  982,  981,  980,  979,  975,  974,
      973,  972,  971,  970,  969,  968,  967,  966,  965,  964,
      963,  962,  958,  957,  956,  955,  952,  949,  948,  947,
      946,  945,  944,  943,  942,  941,  940,  939,  938,  937,
      936,  935,  934,  933,  932,  931,  930,  929,  928,  927,
      926,  925,  924,  921,  920,  917,  916,  915,  914,  913,
      912,  911,  910,  909,  908,  907,  904,  903,  902,  901,
      898,  897,  896,  895,  894,  888,  887,  886,  883,  882,

      879,  878,  877,  876,  875,  872,  871,  870,  869,  868,
      867,  866,  865,  862,  861,  860,  859,  858,  857,  856,
      855,  854,  853,  850,  849,  848,  840,  839,  838,  837,
      836,  835,  834,  833,  829,  828,  827,  826,  825,  814,
      813,  809,  808,  807,  806,  805,  804,  800,  799,  798,
      797,  796,  795,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  781,  780,  779,  778,
      777,  776,  775,  774,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  760,  759,  757,  755,  754,  753,
      752,  751,  750,  749,  748,  747,  746,  745,  744,  743,

      742,  741,  740,  739,  733,  732,  722,  721,  720,  713,
      702,  701,  692,  682,  681,  678,  673,  672,  671,  670,
      669,  668,  667,  666,  662,  661,  660,  657,  654,  653,
      648,  636,  635,  634,  626,  623,  622,  621,  618,  612,
      611,  602,  601,  600,  596,  595,  594,  591,  590,  589,
      588,  579,  578,  575,  574,  573,  572,  571,  567,  566,
      565,  564,  561,  560,  559,  558,  550,  549,  546,  545,
      541,  525,  517,  514,  513,  512,  505,  495,  494,  490,
      489,  488,  484,  483,  482,  479,  478,  477,  473,  472,
      471,  468,  467,  466,  465,  464,  463,  462,  461,  460,

      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  220,  437,  436,
      432,  431,  430,  429,  428,  427,  426,  425,  203,  201,
      199,  197,  191,  424,  423,  328,  268,  267,  266,  243,
      242,  238,  234,  233,  225,  224,  220,  118,  216,  215,
      203,  201,  199,  197,  191,  125,  119,  118,  117,  116,
      115, 2518,  114,  114,  112,  112,   93,   93,   66,   66,
       27, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,

     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518
    } ;

static yyconst flex_int16_t yy_chk[3154] =
    {   0,
        0,    0,    1,    2,    0,    0,    1,    2,   68,   68,
       68,   69,   69,   69,   45,   47,   45,   47,   45,   47,
       49,  126,   49,  126,   49,  126,    0,    1,    2,   76,
       76,   76,   77,   77,   77,   82,   82,   82,   83,   83,
       83,   88,   88,   88,   89,   89,   89,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   17,
       17,   17,   18,   18,   18,   19,   19,   19,   20,   20,
       20,   21,   21,   21,  122,  120,   17,  123,  124,   18,
      148,  222,   19,  148,   39,   20,  870,  148,   21,   22,
       22,   22,   95,   95,   95,   61,   61,   61,   96,   96,

       96,  101,  101,  101,  282,  282,   22,  102,  102,  102,
      107,  107,  107,  108,  108,  108,  143,  143,  143,  122,
       39,  123,  127,  124,  127,  140,  127,  221,  222,  140,
      138,   39,  120,  170,  138,  140,   17,  170,   17,   18,
      138,   18,   19,  223,   19,   20,  138,   20,   21,  145,
       21,   39,  150,  145,  152,  150,  150,  153,  217,  153,
      217,  152,  264,  145,  151,  176,   22,  221,   22,   56,
       56,   56,   56,   56,   61,  264,  151,  176,  871,   56,
      288,  176,  278,  223,   56,   56,  288,  278,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,  872,   56,   56,  188,  188,  188,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  112,  149,  873,  256,
      149,  149,  154,  192,  192,  192,  331,  331,  181,  212,
      149,  149,  212,  256,  112,  160,  160,  160,  212,  160,
      276,  160,  160,  160,  112,  112,  112,  293,  874,  154,
      112,  154,  154,  300,  181,  276,  112,  181,  181,  112,
      161,  293,  112,  188,  161,  112,  161,  300,  161,  154,

      165,  161,  875,  286,  161,  162,  165,  286,  162,  162,
      161,  165,  162,  162,  165,  174,  162,  165,  163,  162,
      174,  163,  163,  162,  174,  162,  163,  174,  361,  163,
      269,  174,  163,  174,  269,  164,  164,  164,  163,  164,
      164,  269,  166,  164,  166,  361,  166,  164,  166,  168,
      167,  167,  168,  279,  167,  166,  168,  168,  168,  260,
      279,  166,  260,  166,  167,  364,  876,  167,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  260,  291,  171,
      291,  171,  171,  321,  172,  321,  273,  171,  172,  171,
      273,  172,  172,  310,  364,  177,  177,  177,  172,  172,

      177,  273,  177,  177,  172,  173,  177,  310,  180,  177,
      193,  193,  193,  292,  177,  173,  180,  173,  180,  173,
      180,  173,  348,  173,  292,  292,  173,  173,  388,  173,
      173,  303,  348,  173,  175,  173,  173,  173,  175,  277,
      388,  175,  175,  277,  325,  175,  175,  303,  178,  303,
      178,  175,  175,  178,  178,  324,  277,  178,  178,  325,
      324,  178,  178,  304,  178,  178,  178,  179,  178,  182,
      304,  179,  179,  182,  179,  179,  194,  194,  194,  879,
      182,  179,  182,  356,  179,  195,  195,  195,  198,  198,
      198,  200,  200,  200,  202,  202,  202,  281,  356,  289,

      566,  289,  566,  289,  305,  281,  289,  289,  281,  281,
      294,  305,  295,  297,  297,  294,  297,  315,  295,  326,
      340,  315,  326,  294,  295,  341,  335,  342,  355,  341,
      295,  340,  353,  295,  342,  315,  326,  335,  326,  335,
      345,  365,  346,  341,  345,  346,  342,  366,  345,  368,
      353,  362,  362,  368,  372,  369,  387,  355,  374,  393,
      394,  366,  369,  355,  362,  378,  374,  387,  372,  378,
      365,  390,  403,  355,  394,  378,  395,  397,  399,  390,
      355,  881,  395,  395,  398,  397,  402,  402,  393,  440,
      393,  398,  404,  399,  399,  405,  399,  402,  407,  404,

      402,  403,  407,  408,  408,  405,  409,  393,  413,  414,
      417,  442,  414,  413,  491,  409,  413,  418,  500,  418,
      414,  580,  413,  446,  417,  500,  580,  414,  446,  414,
      491,  491,  418,  503,  446,  440,  509,  503,  882,  509,
      500,  761,  503,  509,  520,  503,  542,  761,  503,  503,
      503,  503,  503,  503,  521,  520,  521,  442,  520,  527,
      542,  665,  520,  553,  562,  656,  585,  521,  598,  527,
      598,  553,  571,  665,  562,  571,  571,  585,  602,  634,
      636,  634,  656,  571,  656,  636,  641,  641,  602,  702,
      571,  680,  695,  695,  697,  714,  715,  714,  720,  756,

      641,  728,  680,  758,  702,  680,  702,  715,  883,  680,
      733,  773,  814,  720,  697,  728,  733,  814,  807,  733,
      816,  733,  815,  733,  733,  733,  816,  818,  773,  807,
      815,  820,  807,  838,  820,  866,  885,  842,  866,  818,
      838,  855,  815,  818,  756,  842,  886,  855,  758,  877,
      887,  855,  888,  889,  877,  866,  890,  891,  892,  893,
      894,  896,  897,  899,  900,  902,  903,  904,  897,  905,
      906,  907,  908,  910,  911,  912,  913,  914,  915,  916,
      917,  919,  907,  920,  921,  922,  920,  920,  923,  920,
      925,  917,  926,  927,  928,  929,  930,  917,  917,  917,

      928,  920,  931,  932,  933,  933,  934,  935,  933,  936,
      937,  933,  938,  939,  940,  941,  942,  933,  943,  944,
      933,  945,  946,  947,  948,  950,  948,  950,  951,  953,
      954,  955,  956,  957,  959,  960,  961,  962,  963,  964,
      965,  966,  969,  970,  971,  972,  973,  974,  975,  976,
      978,  980,  981,  982,  984,  985,  984,  974,  984,  986,
      987,  988,  989,  990,  974,  991,  992,  984,  993,  994,
      995,  998,  984,  999, 1000, 1001, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028,

     1029, 1028, 1030, 1028, 1031, 1033, 1034, 1021, 1035, 1036,
     1037, 1038, 1028, 1027, 1039, 1040, 1041, 1028, 1042, 1043,
     1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1061, 1062, 1063,
     1064, 1065, 1066, 1068, 1069, 1069, 1061, 1071, 1072, 1073,
     1069, 1063, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082,
     1083, 1084, 1069, 1085, 1069, 1089, 1091, 1092, 1094, 1096,
     1097, 1098, 1099, 1102, 1103, 1105, 1106, 1109, 1110, 1111,
     1114, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130,
     1132, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142,

     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153,
     1154, 1155, 1156, 1157, 1151, 1151, 1158, 1159, 1161, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1179, 1181, 1184, 1185, 1186, 1187,
     1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
     1198, 1200, 1201, 1202, 1203, 1204, 1208, 1209, 1212, 1213,
     1215, 1214, 1216, 1217, 1218, 1198, 1214, 1219, 1220, 1221,
     1224, 1225, 1226, 1228, 1229, 1230, 1233, 1234, 1235, 1238,
     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1259, 1260,

     1261, 1262, 1263, 1264, 1261, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1274, 1276, 1277, 1278, 1271, 1279, 1280,
     1282, 1284, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
     1296, 1297, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1319, 1320,
     1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1316, 1327, 1337, 1339, 1343, 1346,
     1339, 1327, 1327, 1327, 1347, 1350, 1351, 1352, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1369, 1371, 1372, 1374, 1375, 1376, 1377,

     1379, 1383, 1384, 1367, 1361, 1385, 1387, 1388, 1390, 1391,
     1392, 1393, 1371, 1379, 1395, 1396, 1397, 1379, 1398, 1399,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1398, 1415, 1416, 1417, 1418, 1419, 1423, 1424,
     1425, 1427, 1428, 1429, 1431, 1434, 1435, 1436, 1438, 1442,
     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1453,
     1455, 1456, 1457, 1458, 1459, 1460, 1461, 1463, 1464, 1465,
     1466, 1467, 1470, 1471, 1472, 1475, 1477, 1478, 1479, 1477,
     1480, 1481, 1482, 1483, 1485, 1486, 1487, 1488, 1490, 1491,
     1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1502,

     1503, 1504, 1506, 1507, 1508, 1510, 1511, 1512, 1514, 1515,
     1516, 1518, 1519, 1520, 1522, 1523, 1524, 1525, 1527, 1528,
     1529, 1530, 1531, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1544, 1545, 1527, 1546, 1550, 1551, 1552, 1553, 1555,
     1559, 1544, 1560, 1564, 1565, 1568, 1569, 1571, 1572, 1573,
     1574, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1581,
     1584, 1587, 1588, 1589, 1590, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1601, 1603, 1604, 1605, 1606, 1608,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,

     1633, 1636, 1637, 1638, 1639, 1640, 1641, 1643, 1644, 1645,
     1646, 1647, 1638, 1648, 1650, 1651, 1652, 1653, 1654, 1646,
     1655, 1658, 1659, 1660, 1661, 1654, 1662, 1663, 1665, 1666,
     1667, 1668, 1669, 1670, 1672, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689,
     1690, 1691, 1693, 1694, 1696, 1697, 1698, 1699, 1700, 1701,
     1703, 1705, 1706, 1707, 1708, 1709, 1710, 1714, 1715, 1718,
     1719, 1720, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1731, 1732, 1733, 1734, 1736, 1737, 1738, 1739, 1741, 1742,
     1743, 1744, 1745, 1743, 1746, 1748, 1750, 1751, 1752, 1753,

     1754, 1755, 1756, 1757, 1759, 1760, 1761, 1762, 1763, 1759,
     1764, 1765, 1766, 1767, 1768, 1769, 1771, 1772, 1773, 1774,
     1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1787, 1789, 1790, 1793, 1794, 1795, 1797, 1799, 1800,
     1801, 1802, 1803, 1807, 1809, 1810, 1811, 1813, 1814, 1815,
     1817, 1821, 1822, 1823, 1826, 1829, 1830, 1831, 1832, 1833,
     1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1847,
     1850, 1851, 1852, 1853, 1854, 1847, 1855, 1856, 1857, 1858,
     1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1868, 1869,
     1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,

     1882, 1883, 1885, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
     1894, 1895, 1897, 1899, 1901, 1902, 1903, 1904, 1905, 1907,
     1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
     1919, 1920, 1921, 1922, 1923, 1924, 1925, 1927, 1929, 1932,
     1933, 1934, 1935, 1939, 1940, 1943, 1945, 1946, 1947, 1948,
     1949, 1950, 1951, 1952, 1953, 1955, 1956, 1957, 1958, 1961,
     1962, 1963, 1964, 1965, 1966, 1967, 1970, 1971, 1972, 1973,
     1974, 1975, 1976, 1977, 1978, 1981, 1982, 1983, 1984, 1985,
     1986, 1988, 1989, 1990, 1992, 1993, 1994, 1996, 1999, 2001,
     2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2012, 2013,

     2014, 2015, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2026,
     2027, 2030, 2031, 2032, 2033, 2034, 2035, 2037, 2038, 2039,
     2041, 2042, 2043, 2045, 2046, 2048, 2049, 2050, 2052, 2053,
     2054, 2055, 2056, 2057, 2059, 2060, 2061, 2063, 2054, 2064,
     2066, 2067, 2069, 2070, 2054, 2075, 2077, 2081, 2083, 2084,
     2085, 2086, 2088, 2092, 2095, 2096, 2097, 2098, 2099, 2100,
     2101, 2103, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
     2114, 2115, 2116, 2117, 2120, 2121, 2125, 2128, 2129, 2131,
     2132, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2144,
     2145, 2150, 2151, 2153, 2156, 2157, 2158, 2159, 2160, 2161,

     2135, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2171,
     2172, 2173, 2174, 2176, 2177, 2178, 2179, 2181, 2184, 2185,
     2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
     2198, 2199, 2203, 2204, 2205, 2206, 2208, 2209, 2210, 2211,
     2212, 2213, 2214, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
     2223, 2224, 2225, 2226, 2227, 2228, 2230, 2231, 2221, 2232,
     2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2245,
     2246, 2247, 2248, 2249, 2251, 2253, 2254, 2255, 2257, 2258,
     2259, 2260, 2261, 2262, 2264, 2265, 2266, 2272, 2273, 2275,
     2277, 2278, 2279, 2280, 2282, 2283, 2287, 2288, 2289, 2290,

     2291, 2292, 2296, 2297, 2299, 2300, 2302, 2305, 2306, 2307,
     2308, 2300, 2310, 2311, 2312, 2315, 2317, 2318, 2319, 2296,
     2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329,
     2330, 2331, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341,
     2342, 2343, 2347, 2348, 2349, 2350, 2351, 2353, 2354, 2355,
     2357, 2358, 2359, 2360, 2362, 2363, 2364, 2365, 2366, 2367,
     2368, 2369, 2371, 2372, 2373, 2374, 2375, 2376, 2378, 2379,
     2380, 2381, 2382, 2383, 2384, 2385, 2387, 2389, 2390, 2391,
     2392, 2393, 2395, 2396, 2397, 2398, 2401, 2402, 2404, 2405,
     2407, 2408, 2409, 2411, 2412, 2413, 2414, 2415, 2416, 2418,

     2419, 2420, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2431,
     2433, 2434, 2435, 2436, 2437, 2438, 2439, 2442, 2444, 2448,
     2449, 2450, 2451, 2452, 2453, 2454, 2460, 2462, 2463, 2465,
     2468, 2469, 2470, 2471, 2472, 2473, 2476, 2478, 2480, 2482,
     2483, 2485, 2486, 2487, 2489, 2491, 2492, 2493, 2494, 2496,
     2497, 2498, 2499, 2501, 2505, 2507, 2508, 2509, 2510, 2512,
     2516,  869,  868,  867,  865,  863,  861,  860,  859,  858,
      857,  856, 2483, 2519, 2519, 2519, 2519, 2519, 2519, 2519,
     2519, 2519, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520,
     2520, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,

     2522, 2522, 2522, 2522, 2522, 2522, 2522, 2522, 2522, 2523,
     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2524, 2524,
     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2525,  853,  852,
     2525, 2525,  851, 2525, 2526, 2526, 2527, 2527, 2527,  848,
     2527, 2527, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2529, 2529, 2529, 2529, 2529, 2529, 2529,  847, 2529,
     2530, 2530, 2530, 2530,  846, 2530, 2531, 2531, 2532,  844,
     2532, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533,
     2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534,  843,
      841,  840,  839,  837,  836,  835,  834,  833,  832,  831,

      830,  829,  828,  827,  826,  825,  824,  823,  822,  821,
      813,  812,  809,  808,  805,  804,  803,  802,  801,  800,
      799,  798,  797,  796,  795,  793,  792,  790,  788,  787,
      786,  785,  784,  783,  782,  781,  780,  779,  777,  776,
      775,  774,  772,  771,  769,  768,  767,  766,  765,  764,
      759,  754,  753,  752,  751,  750,  749,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  739,  738,  735,  734,
      732,  731,  730,  729,  727,  726,  725,  724,  723,  722,
      721,  718,  717,  716,  713,  712,  711,  709,  708,  707,
      706,  704,  703,  701,  700,  699,  698,  696,  694,  693,

      692,  691,  690,  689,  688,  687,  686,  684,  683,  682,
      681,  679,  678,  677,  676,  673,  672,  671,  670,  669,
      668,  664,  663,  662,  661,  660,  658,  657,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  640,  639,  638,  637,  635,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  617,  616,  614,  613,  612,  611,  610,  609,  607,
      606,  605,  603,  600,  599,  597,  596,  595,  594,  593,
      592,  590,  589,  588,  587,  586,  584,  583,  582,  581,
      578,  577,  575,  574,  572,  570,  569,  568,  564,  563,

      561,  560,  559,  558,  556,  552,  551,  550,  548,  547,
      545,  544,  543,  541,  539,  537,  536,  534,  532,  531,
      530,  529,  528,  524,  523,  522,  519,  518,  517,  515,
      514,  513,  511,  510,  508,  507,  506,  505,  504,  502,
      501,  499,  498,  496,  495,  494,  493,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  479,  478,  477,
      476,  475,  474,  473,  472,  470,  469,  468,  467,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      451,  450,  449,  448,  445,  444,  441,  439,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,

      425,  424,  420,  419,  416,  415,  412,  411,  410,  406,
      401,  400,  396,  392,  391,  389,  386,  385,  384,  383,
      382,  381,  380,  379,  377,  376,  375,  373,  371,  370,
      367,  360,  359,  358,  354,  352,  351,  349,  347,  344,
      343,  339,  338,  336,  334,  333,  332,  330,  329,  328,
      327,  323,  322,  320,  319,  318,  317,  316,  314,  313,
      312,  311,  309,  308,  307,  306,  302,  301,  299,  298,
      296,  290,  287,  285,  284,  283,  280,  275,  274,  272,
      271,  270,  268,  266,  265,  263,  262,  261,  259,  258,
      257,  255,  254,  253,  251,  248,  247,  246,  245,  244,

      241,  240,  239,  238,  237,  236,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  219,  215,  213,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  201,
      199,  196,  190,  184,  183,  169,  157,  156,  155,  147,
      146,  144,  142,  141,  137,  125,  121,  118,  116,  114,
      109,  103,   97,   93,   66,   40,   38,   34,   32,   31,
       30,   27,   26,   25,   24,   23,   16,   15,    6,    5,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,

     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int itex2MML_yy_flex_debug;
int itex2MML_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *itex2MML_yytext;
#line 1 "itex2MML.l"
/*             itex2MML 1.3.8
 *   itex2MML.l last modified 3/23/2009
 */
#line 6 "itex2MML.l"

#line 10 "itex2MML.l"
#include <string.h>

#define YYSTYPE char *

#include "y.tab.h"
#include "itex2MML.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_INPUT(buffer,result,max_size) result = s_itex2MML_read (buffer, max_size)

static int s_itex2MML_read (char * buffer, int max_size);

#define yylval itex2MML_yylval

extern char * yylval;

int itex2MML_lineno = 1;

int itex2MML_rowposn = 0;
int itex2MML_displaymode = 0;
#line 2030 "lex.yy.c"

#define INITIAL 0
#define MATH 1
#define ATTRIBUTELIST 2
#define BBOLD 3
#define FRAKTUR 4
#define CALLIGRAPHIC 5
#define ROMAN 6
#define PLAINTEXT 7
#define INT1 8
#define INT2 9
#define INT3 10
#define MATHENV 11
#define SVGENV 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int itex2MML_yylex_destroy (void );

int itex2MML_yyget_debug (void );

void itex2MML_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE itex2MML_yyget_extra (void );

void itex2MML_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *itex2MML_yyget_in (void );

void itex2MML_yyset_in  (FILE * in_str  );

FILE *itex2MML_yyget_out (void );

void itex2MML_yyset_out  (FILE * out_str  );

int itex2MML_yyget_leng (void );

char *itex2MML_yyget_text (void );

int itex2MML_yyget_lineno (void );

void itex2MML_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int itex2MML_yywrap (void );
#else
extern int itex2MML_yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( itex2MML_yytext, itex2MML_yyleng, 1, itex2MML_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( itex2MML_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( itex2MML_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, itex2MML_yyin))==0 && ferror(itex2MML_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(itex2MML_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int itex2MML_yylex (void);

#define YY_DECL int itex2MML_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after itex2MML_yytext and itex2MML_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 31 "itex2MML.l"

 if (itex2MML_rowposn==1) itex2MML_rowposn=0;
   if (itex2MML_rowposn==2) itex2MML_rowposn=1;


#line 2230 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! itex2MML_yyin )
			itex2MML_yyin = stdin;

		if ( ! itex2MML_yyout )
			itex2MML_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			itex2MML_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				itex2MML_yy_create_buffer(itex2MML_yyin,YY_BUF_SIZE );
		}

		itex2MML_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of itex2MML_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2519 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3071 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 36 "itex2MML.l"
BEGIN(MATH); itex2MML_rowposn=2; if (itex2MML_yyleng==2) { itex2MML_displaymode=1; return STARTDMATH;}; itex2MML_displaymode=0; return STARTMATH;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 37 "itex2MML.l"
BEGIN(MATH); itex2MML_rowposn=2; itex2MML_displaymode=1; return STARTDMATH;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "itex2MML.l"
return 0;
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 39 "itex2MML.l"
{itex2MML_lineno++; yylval=itex2MML_copy_string(itex2MML_yytext); return CHAR;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 40 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return CHAR;}
	YY_BREAK

case 6:
#line 48 "itex2MML.l"
case 7:
YY_RULE_SETUP
#line 48 "itex2MML.l"
{BEGIN(INITIAL); return ENDMATH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 51 "itex2MML.l"
return SUP;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 52 "itex2MML.l"
return SUB; 
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 53 "itex2MML.l"
return EMPTYMROW;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 54 "itex2MML.l"
{itex2MML_rowposn = 2; return MROWOPEN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 55 "itex2MML.l"
return MROWCLOSE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "itex2MML.l"
itex2MML_rowposn=2; return LEFT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "itex2MML.l"
return RIGHT;
	YY_BREAK
case 15:
#line 61 "itex2MML.l"
case 16:
YY_RULE_SETUP
#line 61 "itex2MML.l"
{return BIG;}
	YY_BREAK
case 17:
#line 63 "itex2MML.l"
case 18:
YY_RULE_SETUP
#line 63 "itex2MML.l"
{return BBIG;}
	YY_BREAK
case 19:
#line 65 "itex2MML.l"
case 20:
YY_RULE_SETUP
#line 65 "itex2MML.l"
{return BIGG;}
	YY_BREAK
case 21:
#line 67 "itex2MML.l"
case 22:
YY_RULE_SETUP
#line 67 "itex2MML.l"
{return BBIGG;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "itex2MML.l"
{return BIGL;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "itex2MML.l"
{return BBIGL;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "itex2MML.l"
{return BIGGL;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "itex2MML.l"
{return BBIGGL;}
	YY_BREAK
case 27:
#line 75 "itex2MML.l"
case 28:
#line 76 "itex2MML.l"
case 29:
#line 77 "itex2MML.l"
case 30:
YY_RULE_SETUP
#line 77 "itex2MML.l"
{/* Ignore */ ;}
	YY_BREAK
case 31:
#line 81 "itex2MML.l"
case 32:
YY_RULE_SETUP
#line 81 "itex2MML.l"
{itex2MML_rowposn=2; return COLSEP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "itex2MML.l"
{yylval=itex2MML_copy_string("&amp;"); return MI;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "itex2MML.l"
{yylval=itex2MML_copy_string("$"); return MI;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "itex2MML.l"
{yylval=itex2MML_copy_string("%"); return MI;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "itex2MML.l"
itex2MML_rowposn=2; return ROWSEP;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 90 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return MI;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, " "); return MN;}
	YY_BREAK
case 39:
#line 94 "itex2MML.l"
case 40:
YY_RULE_SETUP
#line 94 "itex2MML.l"
{yylval=itex2MML_copy_string("&infin;"); return MN;}
	YY_BREAK
case 41:
#line 97 "itex2MML.l"
case 42:
YY_RULE_SETUP
#line 97 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return LEFTDELIM;}
	YY_BREAK
case 43:
#line 100 "itex2MML.l"
case 44:
YY_RULE_SETUP
#line 100 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return RIGHTDELIM;}
	YY_BREAK
case 45:
#line 103 "itex2MML.l"
case 46:
YY_RULE_SETUP
#line 103 "itex2MML.l"
{yylval=itex2MML_copy_string("{"); return LEFTDELIM;}
	YY_BREAK
case 47:
#line 105 "itex2MML.l"
case 48:
YY_RULE_SETUP
#line 105 "itex2MML.l"
{yylval=itex2MML_copy_string("}"); return RIGHTDELIM;}
	YY_BREAK
case 49:
#line 108 "itex2MML.l"
case 50:
YY_RULE_SETUP
#line 108 "itex2MML.l"
{yylval=itex2MML_copy_string("&VerticalBar;"); return OTHERDELIM;}
	YY_BREAK
case 51:
#line 110 "itex2MML.l"
case 52:
YY_RULE_SETUP
#line 110 "itex2MML.l"
{yylval=itex2MML_copy_string("&DoubleVerticalBar;"); return OTHERDELIM;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "itex2MML.l"
{yylval=itex2MML_copy_string("&setminus;"); return MO;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "itex2MML.l"
{yylval=itex2MML_copy_string("&bsol;"); return MO;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "itex2MML.l"
{yylval=itex2MML_copy_string("&#xFE68;"); return MOF;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x20EB;"); return MO;}
	YY_BREAK
case 57:
#line 119 "itex2MML.l"
case 58:
#line 120 "itex2MML.l"
case 59:
#line 121 "itex2MML.l"
case 60:
YY_RULE_SETUP
#line 121 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return LEFTDELIM;}
	YY_BREAK
case 61:
#line 124 "itex2MML.l"
case 62:
#line 125 "itex2MML.l"
case 63:
#line 126 "itex2MML.l"
case 64:
YY_RULE_SETUP
#line 126 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return RIGHTDELIM;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 128 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return OTHERDELIM;}
	YY_BREAK
case 66:
#line 131 "itex2MML.l"
case 67:
#line 132 "itex2MML.l"
case 68:
YY_RULE_SETUP
#line 132 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return OTHERDELIM;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 134 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return PERIODDELIM;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 136 "itex2MML.l"
{if (itex2MML_rowposn==1) return UNARYMINUS; else {yylval=itex2MML_copy_string("&minus;"); return MO;}}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 138 "itex2MML.l"
{if (itex2MML_rowposn==1) return UNARYPLUS; else {yylval=itex2MML_copy_string("+"); return MO;}}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "itex2MML.l"
{yylval=itex2MML_copy_string("#"); return MOL;}
	YY_BREAK
case 73:
#line 143 "itex2MML.l"
case 74:
#line 144 "itex2MML.l"
case 75:
#line 145 "itex2MML.l"
case 76:
#line 146 "itex2MML.l"
case 77:
#line 147 "itex2MML.l"
case 78:
#line 148 "itex2MML.l"
case 79:
#line 149 "itex2MML.l"
case 80:
#line 150 "itex2MML.l"
case 81:
#line 151 "itex2MML.l"
case 82:
YY_RULE_SETUP
#line 151 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return MOL;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "itex2MML.l"
{yylval=itex2MML_copy_string("&prime;"); return MOLL;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 154 "itex2MML.l"
{yylval=itex2MML_copy_string("&prime;"); return MOL;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 155 "itex2MML.l"
{yylval=itex2MML_copy_string("&Prime;"); return MOL;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 156 "itex2MML.l"
{yylval=itex2MML_copy_string("&#8244;"); return MOL;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 157 "itex2MML.l"
{yylval=itex2MML_copy_string("&#8279;"); return MOL;}
	YY_BREAK
case 88:
#line 160 "itex2MML.l"
case 89:
#line 161 "itex2MML.l"
case 90:
#line 162 "itex2MML.l"
case 91:
#line 163 "itex2MML.l"
case 92:
#line 164 "itex2MML.l"
case 93:
#line 165 "itex2MML.l"
case 94:
#line 166 "itex2MML.l"
case 95:
#line 167 "itex2MML.l"
case 96:
#line 168 "itex2MML.l"
case 97:
#line 169 "itex2MML.l"
case 98:
#line 170 "itex2MML.l"
case 99:
#line 171 "itex2MML.l"
case 100:
#line 172 "itex2MML.l"
case 101:
#line 173 "itex2MML.l"
case 102:
#line 174 "itex2MML.l"
case 103:
#line 175 "itex2MML.l"
case 104:
#line 176 "itex2MML.l"
case 105:
#line 177 "itex2MML.l"
case 106:
#line 178 "itex2MML.l"
case 107:
#line 179 "itex2MML.l"
case 108:
#line 180 "itex2MML.l"
case 109:
#line 181 "itex2MML.l"
case 110:
#line 182 "itex2MML.l"
case 111:
#line 183 "itex2MML.l"
case 112:
#line 184 "itex2MML.l"
case 113:
#line 185 "itex2MML.l"
case 114:
#line 186 "itex2MML.l"
case 115:
YY_RULE_SETUP
#line 186 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return MI;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 188 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x03D5;"); return MI;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 189 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x03C6;"); return MI;}
	YY_BREAK
case 118:
#line 192 "itex2MML.l"
case 119:
#line 193 "itex2MML.l"
case 120:
#line 194 "itex2MML.l"
case 121:
#line 195 "itex2MML.l"
case 122:
#line 196 "itex2MML.l"
case 123:
#line 197 "itex2MML.l"
case 124:
#line 198 "itex2MML.l"
case 125:
#line 199 "itex2MML.l"
case 126:
#line 200 "itex2MML.l"
case 127:
#line 201 "itex2MML.l"
case 128:
#line 202 "itex2MML.l"
case 129:
#line 203 "itex2MML.l"
case 130:
#line 204 "itex2MML.l"
case 131:
#line 205 "itex2MML.l"
case 132:
#line 206 "itex2MML.l"
case 133:
#line 207 "itex2MML.l"
case 134:
#line 208 "itex2MML.l"
case 135:
#line 209 "itex2MML.l"
case 136:
#line 210 "itex2MML.l"
case 137:
#line 211 "itex2MML.l"
case 138:
#line 212 "itex2MML.l"
case 139:
YY_RULE_SETUP
#line 212 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext+1); return MI;}
	YY_BREAK
case 140:
#line 215 "itex2MML.l"
case 141:
#line 216 "itex2MML.l"
case 142:
#line 217 "itex2MML.l"
case 143:
#line 218 "itex2MML.l"
case 144:
#line 219 "itex2MML.l"
case 145:
#line 220 "itex2MML.l"
case 146:
#line 221 "itex2MML.l"
case 147:
#line 222 "itex2MML.l"
case 148:
#line 223 "itex2MML.l"
case 149:
YY_RULE_SETUP
#line 223 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext+1); return MIB;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "itex2MML.l"
{yylval=itex2MML_copy_string("&oscr;"); return MI;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 227 "itex2MML.l"
{yylval=itex2MML_copy_string("&epsi;"); return MI;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 229 "itex2MML.l"
{yylval=itex2MML_copy_string("&sdot;"); return MO;}
	YY_BREAK
case 153:
#line 232 "itex2MML.l"
case 154:
#line 233 "itex2MML.l"
case 155:
#line 234 "itex2MML.l"
case 156:
#line 235 "itex2MML.l"
case 157:
#line 236 "itex2MML.l"
case 158:
#line 237 "itex2MML.l"
case 159:
#line 238 "itex2MML.l"
case 160:
#line 239 "itex2MML.l"
case 161:
#line 240 "itex2MML.l"
case 162:
#line 241 "itex2MML.l"
case 163:
#line 242 "itex2MML.l"
case 164:
#line 243 "itex2MML.l"
case 165:
#line 244 "itex2MML.l"
case 166:
#line 245 "itex2MML.l"
case 167:
#line 246 "itex2MML.l"
case 168:
#line 247 "itex2MML.l"
case 169:
#line 248 "itex2MML.l"
case 170:
#line 249 "itex2MML.l"
case 171:
#line 250 "itex2MML.l"
case 172:
#line 251 "itex2MML.l"
case 173:
#line 252 "itex2MML.l"
case 174:
YY_RULE_SETUP
#line 252 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return MI;}
	YY_BREAK
case 175:
#line 255 "itex2MML.l"
case 176:
YY_RULE_SETUP
#line 255 "itex2MML.l"
{yylval=itex2MML_copy_string("&Upsi;"); return MI;}
	YY_BREAK
case 177:
#line 258 "itex2MML.l"
case 178:
YY_RULE_SETUP
#line 258 "itex2MML.l"
{yylval=itex2MML_copy_string("&iff;"); return MOL;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 260 "itex2MML.l"
{yylval=itex2MML_copy_string("&Leftrightarrow;"); return MOL;}
	YY_BREAK
case 180:
#line 263 "itex2MML.l"
case 181:
YY_RULE_SETUP
#line 263 "itex2MML.l"
{yylval=itex2MML_copy_string("&Leftarrow;"); return MOL;}
	YY_BREAK
case 182:
#line 266 "itex2MML.l"
case 183:
YY_RULE_SETUP
#line 266 "itex2MML.l"
{yylval=itex2MML_copy_string("&Rightarrow;"); return MOL;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 268 "itex2MML.l"
{yylval=itex2MML_copy_string("&hookleftarrow;"); return MOL;}
	YY_BREAK
case 185:
#line 271 "itex2MML.l"
case 186:
YY_RULE_SETUP
#line 271 "itex2MML.l"
{yylval=itex2MML_copy_string("&hookrightarrow;"); return MOL;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 273 "itex2MML.l"
{yylval=itex2MML_copy_string("&longleftarrow;"); return MOL;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 275 "itex2MML.l"
{yylval=itex2MML_copy_string("&longrightarrow;"); return MOL;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 277 "itex2MML.l"
{yylval=itex2MML_copy_string("&leftarrow;"); return MOL;}
	YY_BREAK
case 190:
#line 280 "itex2MML.l"
case 191:
YY_RULE_SETUP
#line 280 "itex2MML.l"
{yylval=itex2MML_copy_string("&rightarrow;"); return MOL;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 282 "itex2MML.l"
{yylval=itex2MML_copy_string("&leftrightarrow;"); return MOL;}
	YY_BREAK
case 193:
#line 285 "itex2MML.l"
case 194:
YY_RULE_SETUP
#line 285 "itex2MML.l"
{yylval=itex2MML_copy_string("&map;"); return MOL;}
	YY_BREAK
case 195:
#line 288 "itex2MML.l"
case 196:
YY_RULE_SETUP
#line 288 "itex2MML.l"
{yylval=itex2MML_copy_string("&nearr;"); return MOL;}
	YY_BREAK
case 197:
#line 291 "itex2MML.l"
case 198:
YY_RULE_SETUP
#line 291 "itex2MML.l"
{yylval=itex2MML_copy_string("&nwarr;"); return MOL;}
	YY_BREAK
case 199:
#line 294 "itex2MML.l"
case 200:
YY_RULE_SETUP
#line 294 "itex2MML.l"
{yylval=itex2MML_copy_string("&searr;"); return MOL;}
	YY_BREAK
case 201:
#line 297 "itex2MML.l"
case 202:
YY_RULE_SETUP
#line 297 "itex2MML.l"
{yylval=itex2MML_copy_string("&swarr;"); return MOL;}
	YY_BREAK
case 203:
#line 300 "itex2MML.l"
case 204:
YY_RULE_SETUP
#line 300 "itex2MML.l"
{yylval=itex2MML_copy_string("&neArr;"); return MOL;}
	YY_BREAK
case 205:
#line 303 "itex2MML.l"
case 206:
YY_RULE_SETUP
#line 303 "itex2MML.l"
{yylval=itex2MML_copy_string("&nwArr;"); return MOL;}
	YY_BREAK
case 207:
#line 306 "itex2MML.l"
case 208:
YY_RULE_SETUP
#line 306 "itex2MML.l"
{yylval=itex2MML_copy_string("&seArr;"); return MOL;}
	YY_BREAK
case 209:
#line 309 "itex2MML.l"
case 210:
YY_RULE_SETUP
#line 309 "itex2MML.l"
{yylval=itex2MML_copy_string("&swArr;"); return MOL;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 311 "itex2MML.l"
{yylval=itex2MML_copy_string("&darr;"); return MOL;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 313 "itex2MML.l"
{yylval=itex2MML_copy_string("&dArr;"); return MOL;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 315 "itex2MML.l"
{yylval=itex2MML_copy_string("&uarr;"); return MOL;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 317 "itex2MML.l"
{yylval=itex2MML_copy_string("&uArr;"); return MOL;}
	YY_BREAK
case 215:
#line 320 "itex2MML.l"
case 216:
#line 321 "itex2MML.l"
case 217:
YY_RULE_SETUP
#line 321 "itex2MML.l"
{yylval=itex2MML_copy_string("&updownarrow;"); return MOL;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 323 "itex2MML.l"
{yylval=itex2MML_copy_string("&Updownarrow;"); return MOL;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 325 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x21DC;"); return MOL;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 326 "itex2MML.l"
{yylval=itex2MML_copy_string("&zigrarr;"); return MOL;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 327 "itex2MML.l"
{yylval=itex2MML_copy_string("&leftrightsquigarrow;"); return MOL;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 328 "itex2MML.l"
{yylval=itex2MML_copy_string("&upuparrows;"); return MOL;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 329 "itex2MML.l"
{yylval=itex2MML_copy_string("&rightleftarrows;"); return MOL;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 330 "itex2MML.l"
{yylval=itex2MML_copy_string("&rightrightarrows;"); return MOL;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 331 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x290E;"); return MOL;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 332 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x290F;"); return MOL;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 333 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x293A;"); return MOL;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 334 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x293B;"); return MOL;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 335 "itex2MML.l"
{yylval=itex2MML_copy_string("&downdownarrows;"); return MOL;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 336 "itex2MML.l"
{yylval=itex2MML_copy_string("&leftleftarrows;"); return MOL;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 337 "itex2MML.l"
{yylval=itex2MML_copy_string("&leftrightarrows;"); return MOL;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 338 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x27F2;"); return MOL;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 339 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x27F3;"); return MOL;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 340 "itex2MML.l"
{yylval=itex2MML_copy_string("&circlearrowleft;"); return MOL;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 341 "itex2MML.l"
{yylval=itex2MML_copy_string("&circlearrowright;"); return MOL;}
	YY_BREAK
case 236:
#line 344 "itex2MML.l"
case 237:
YY_RULE_SETUP
#line 344 "itex2MML.l"
{yylval=itex2MML_copy_string("&hellip;"); return MO;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 345 "itex2MML.l"
{yylval=itex2MML_copy_string("&ctdot;"); return MO;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 346 "itex2MML.l"
{yylval=itex2MML_copy_string("&dtdot;"); return MO;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 347 "itex2MML.l"
{yylval=itex2MML_copy_string("&utdot;"); return MO;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 348 "itex2MML.l"
{yylval=itex2MML_copy_string("&vellip;"); return MO;}
	YY_BREAK
case 242:
#line 351 "itex2MML.l"
case 243:
#line 352 "itex2MML.l"
case 244:
YY_RULE_SETUP
#line 352 "itex2MML.l"
{yylval=itex2MML_copy_string("&cup;"); return MOL;}
	YY_BREAK
case 245:
#line 355 "itex2MML.l"
case 246:
#line 356 "itex2MML.l"
case 247:
YY_RULE_SETUP
#line 356 "itex2MML.l"
{yylval=itex2MML_copy_string("&Union;"); return MOB;}
	YY_BREAK
case 248:
#line 359 "itex2MML.l"
case 249:
YY_RULE_SETUP
#line 359 "itex2MML.l"
{yylval=itex2MML_copy_string("&cap;"); return MOL;}
	YY_BREAK
case 250:
#line 362 "itex2MML.l"
case 251:
YY_RULE_SETUP
#line 362 "itex2MML.l"
{yylval=itex2MML_copy_string("&Intersection;"); return MOB;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 364 "itex2MML.l"
{yylval=itex2MML_copy_string("&Element;"); return MOL;}
	YY_BREAK
case 253:
#line 367 "itex2MML.l"
case 254:
#line 368 "itex2MML.l"
case 255:
#line 369 "itex2MML.l"
case 256:
#line 370 "itex2MML.l"
case 257:
#line 371 "itex2MML.l"
case 258:
#line 372 "itex2MML.l"
case 259:
#line 373 "itex2MML.l"
case 260:
#line 374 "itex2MML.l"
case 261:
#line 375 "itex2MML.l"
case 262:
#line 376 "itex2MML.l"
case 263:
#line 377 "itex2MML.l"
case 264:
#line 378 "itex2MML.l"
case 265:
#line 379 "itex2MML.l"
case 266:
#line 380 "itex2MML.l"
case 267:
#line 381 "itex2MML.l"
case 268:
#line 382 "itex2MML.l"
case 269:
#line 383 "itex2MML.l"
case 270:
#line 384 "itex2MML.l"
case 271:
#line 385 "itex2MML.l"
case 272:
#line 386 "itex2MML.l"
case 273:
#line 387 "itex2MML.l"
case 274:
#line 388 "itex2MML.l"
case 275:
#line 389 "itex2MML.l"
case 276:
#line 390 "itex2MML.l"
case 277:
#line 391 "itex2MML.l"
case 278:
#line 392 "itex2MML.l"
case 279:
#line 393 "itex2MML.l"
case 280:
#line 394 "itex2MML.l"
case 281:
#line 395 "itex2MML.l"
case 282:
#line 396 "itex2MML.l"
case 283:
#line 397 "itex2MML.l"
case 284:
#line 398 "itex2MML.l"
case 285:
#line 399 "itex2MML.l"
case 286:
#line 400 "itex2MML.l"
case 287:
#line 401 "itex2MML.l"
case 288:
#line 402 "itex2MML.l"
case 289:
#line 403 "itex2MML.l"
case 290:
#line 404 "itex2MML.l"
case 291:
#line 405 "itex2MML.l"
case 292:
#line 406 "itex2MML.l"
case 293:
#line 407 "itex2MML.l"
case 294:
#line 408 "itex2MML.l"
case 295:
#line 409 "itex2MML.l"
case 296:
#line 410 "itex2MML.l"
case 297:
#line 411 "itex2MML.l"
case 298:
#line 412 "itex2MML.l"
case 299:
#line 413 "itex2MML.l"
case 300:
#line 414 "itex2MML.l"
case 301:
#line 415 "itex2MML.l"
case 302:
#line 416 "itex2MML.l"
case 303:
#line 417 "itex2MML.l"
case 304:
#line 418 "itex2MML.l"
case 305:
#line 419 "itex2MML.l"
case 306:
#line 420 "itex2MML.l"
case 307:
#line 421 "itex2MML.l"
case 308:
#line 422 "itex2MML.l"
case 309:
#line 423 "itex2MML.l"
case 310:
#line 424 "itex2MML.l"
case 311:
#line 425 "itex2MML.l"
case 312:
#line 426 "itex2MML.l"
case 313:
#line 427 "itex2MML.l"
case 314:
#line 428 "itex2MML.l"
case 315:
#line 429 "itex2MML.l"
case 316:
#line 430 "itex2MML.l"
case 317:
#line 431 "itex2MML.l"
case 318:
#line 432 "itex2MML.l"
case 319:
#line 433 "itex2MML.l"
case 320:
#line 434 "itex2MML.l"
case 321:
#line 435 "itex2MML.l"
case 322:
#line 436 "itex2MML.l"
case 323:
#line 437 "itex2MML.l"
case 324:
#line 438 "itex2MML.l"
case 325:
#line 439 "itex2MML.l"
case 326:
#line 440 "itex2MML.l"
case 327:
#line 441 "itex2MML.l"
case 328:
#line 442 "itex2MML.l"
case 329:
#line 443 "itex2MML.l"
case 330:
#line 444 "itex2MML.l"
case 331:
#line 445 "itex2MML.l"
case 332:
#line 446 "itex2MML.l"
case 333:
#line 447 "itex2MML.l"
case 334:
#line 448 "itex2MML.l"
case 335:
#line 449 "itex2MML.l"
case 336:
#line 450 "itex2MML.l"
case 337:
#line 451 "itex2MML.l"
case 338:
#line 452 "itex2MML.l"
case 339:
#line 453 "itex2MML.l"
case 340:
#line 454 "itex2MML.l"
case 341:
#line 455 "itex2MML.l"
case 342:
#line 456 "itex2MML.l"
case 343:
#line 457 "itex2MML.l"
case 344:
#line 458 "itex2MML.l"
case 345:
#line 459 "itex2MML.l"
case 346:
#line 460 "itex2MML.l"
case 347:
#line 461 "itex2MML.l"
case 348:
#line 462 "itex2MML.l"
case 349:
#line 463 "itex2MML.l"
case 350:
#line 464 "itex2MML.l"
case 351:
#line 465 "itex2MML.l"
case 352:
#line 466 "itex2MML.l"
case 353:
#line 467 "itex2MML.l"
case 354:
#line 468 "itex2MML.l"
case 355:
#line 469 "itex2MML.l"
case 356:
#line 470 "itex2MML.l"
case 357:
#line 471 "itex2MML.l"
case 358:
#line 472 "itex2MML.l"
case 359:
#line 473 "itex2MML.l"
case 360:
#line 474 "itex2MML.l"
case 361:
#line 475 "itex2MML.l"
case 362:
#line 476 "itex2MML.l"
case 363:
#line 477 "itex2MML.l"
case 364:
#line 478 "itex2MML.l"
case 365:
#line 479 "itex2MML.l"
case 366:
#line 480 "itex2MML.l"
case 367:
#line 481 "itex2MML.l"
case 368:
#line 482 "itex2MML.l"
case 369:
#line 483 "itex2MML.l"
case 370:
#line 484 "itex2MML.l"
case 371:
#line 485 "itex2MML.l"
case 372:
#line 486 "itex2MML.l"
case 373:
#line 487 "itex2MML.l"
case 374:
#line 488 "itex2MML.l"
case 375:
#line 489 "itex2MML.l"
case 376:
#line 490 "itex2MML.l"
case 377:
#line 491 "itex2MML.l"
case 378:
#line 492 "itex2MML.l"
case 379:
#line 493 "itex2MML.l"
case 380:
#line 494 "itex2MML.l"
case 381:
#line 495 "itex2MML.l"
case 382:
#line 496 "itex2MML.l"
case 383:
#line 497 "itex2MML.l"
case 384:
#line 498 "itex2MML.l"
case 385:
#line 499 "itex2MML.l"
case 386:
#line 500 "itex2MML.l"
case 387:
#line 501 "itex2MML.l"
case 388:
#line 502 "itex2MML.l"
case 389:
#line 503 "itex2MML.l"
case 390:
#line 504 "itex2MML.l"
case 391:
#line 505 "itex2MML.l"
case 392:
#line 506 "itex2MML.l"
case 393:
#line 507 "itex2MML.l"
case 394:
#line 508 "itex2MML.l"
case 395:
#line 509 "itex2MML.l"
case 396:
#line 510 "itex2MML.l"
case 397:
#line 511 "itex2MML.l"
case 398:
#line 512 "itex2MML.l"
case 399:
#line 513 "itex2MML.l"
case 400:
#line 514 "itex2MML.l"
case 401:
#line 515 "itex2MML.l"
case 402:
#line 516 "itex2MML.l"
case 403:
#line 517 "itex2MML.l"
case 404:
#line 518 "itex2MML.l"
case 405:
#line 519 "itex2MML.l"
case 406:
#line 520 "itex2MML.l"
case 407:
#line 521 "itex2MML.l"
case 408:
#line 522 "itex2MML.l"
case 409:
#line 523 "itex2MML.l"
case 410:
#line 524 "itex2MML.l"
case 411:
#line 525 "itex2MML.l"
case 412:
#line 526 "itex2MML.l"
case 413:
#line 527 "itex2MML.l"
case 414:
#line 528 "itex2MML.l"
case 415:
#line 529 "itex2MML.l"
case 416:
#line 530 "itex2MML.l"
case 417:
#line 531 "itex2MML.l"
case 418:
#line 532 "itex2MML.l"
case 419:
#line 533 "itex2MML.l"
case 420:
#line 534 "itex2MML.l"
case 421:
#line 535 "itex2MML.l"
case 422:
#line 536 "itex2MML.l"
case 423:
#line 537 "itex2MML.l"
case 424:
#line 538 "itex2MML.l"
case 425:
#line 539 "itex2MML.l"
case 426:
#line 540 "itex2MML.l"
case 427:
#line 541 "itex2MML.l"
case 428:
#line 542 "itex2MML.l"
case 429:
#line 543 "itex2MML.l"
case 430:
#line 544 "itex2MML.l"
case 431:
#line 545 "itex2MML.l"
case 432:
#line 546 "itex2MML.l"
case 433:
#line 547 "itex2MML.l"
case 434:
#line 548 "itex2MML.l"
case 435:
#line 549 "itex2MML.l"
case 436:
#line 550 "itex2MML.l"
case 437:
#line 551 "itex2MML.l"
case 438:
YY_RULE_SETUP
#line 551 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return MOL;}
	YY_BREAK
case 439:
#line 554 "itex2MML.l"
case 440:
#line 555 "itex2MML.l"
case 441:
#line 556 "itex2MML.l"
case 442:
#line 557 "itex2MML.l"
case 443:
#line 558 "itex2MML.l"
case 444:
#line 559 "itex2MML.l"
case 445:
#line 560 "itex2MML.l"
case 446:
#line 561 "itex2MML.l"
case 447:
#line 562 "itex2MML.l"
case 448:
YY_RULE_SETUP
#line 562 "itex2MML.l"
{yylval=itex2MML_copy2(itex2MML_yytext, ";"); if (yylval != itex2MML_empty_string) yylval[0]='&'; return MI;}
	YY_BREAK
case 449:
#line 565 "itex2MML.l"
case 450:
YY_RULE_SETUP
#line 565 "itex2MML.l"
{yylval=itex2MML_copy_string("&Vbar;"); return MOL;}
	YY_BREAK
case 451:
#line 567 "itex2MML.l"
case 452:
YY_RULE_SETUP
#line 567 "itex2MML.l"
{yylval=itex2MML_copy_string("&square;"); return MOL;}
	YY_BREAK
case 453:
#line 569 "itex2MML.l"
case 454:
YY_RULE_SETUP
#line 569 "itex2MML.l"
{yylval=itex2MML_copy_string("&emptyv;"); return MI;}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 570 "itex2MML.l"
{yylval=itex2MML_copy_string("&Exists;"); return MOL;}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 571 "itex2MML.l"
{yylval=itex2MML_copy_string("&SmallCircle;"); return MOL;}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 572 "itex2MML.l"
{yylval=itex2MML_copy_string("&RightTriangle;"); return MOL;}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 573 "itex2MML.l"
{yylval=itex2MML_copy_string("&LeftTriangle;"); return MOL;}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 574 "itex2MML.l"
{yylval=itex2MML_copy_string("&Ll;"); return MOL;}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 575 "itex2MML.l"
{yylval=itex2MML_copy_string("&RightTriangleEqual;"); return MOL;}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 576 "itex2MML.l"
{yylval=itex2MML_copy_string("&LeftTriangleEqual;"); return MOL;}
	YY_BREAK
case 462:
#line 578 "itex2MML.l"
case 463:
YY_RULE_SETUP
#line 578 "itex2MML.l"
{yylval=itex2MML_copy_string("&Del;"); return MOL;}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 579 "itex2MML.l"
{yylval=itex2MML_copy_string("&angsph;"); return MOL;}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 581 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x2661;"); return MOL;}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 582 "itex2MML.l"
{yylval=itex2MML_copy_string("&#x2662;"); return MOL;}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 584 "itex2MML.l"
{yylval=itex2MML_copy_string("&PartialD;"); return MOL;}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 586 "itex2MML.l"
{yylval=itex2MML_copy_string("&squf;"); return MO;}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 588 "itex2MML.l"
{yylval=itex2MML_copy_string("mod"); return MOS;}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 589 "itex2MML.l"
{return PMOD;}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 591 "itex2MML.l"
{yylval=itex2MML_copy_string("&perp;"); return MOL;}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 593 "itex2MML.l"
{yylval=itex2MML_copy_string("&not;"); return MOL;}
	YY_BREAK
case 473:
#line 596 "itex2MML.l"
case 474:
YY_RULE_SETUP
#line 596 "itex2MML.l"
{yylval=itex2MML_copy_string("&ne;"); return MOL;}
	YY_BREAK
case 475:
#line 599 "itex2MML.l"
case 476:
YY_RULE_SETUP
#line 599 "itex2MML.l"
{yylval=itex2MML_copy_string("&VerticalBar;"); return MOS;}
	YY_BREAK
case 477:
#line 602 "itex2MML.l"
case 478:
YY_RULE_SETUP
#line 602 "itex2MML.l"
{yylval=itex2MML_copy_string("&Integral;"); return MOL;}
	YY_BREAK
case 479:
#line 605 "itex2MML.l"
case 480:
YY_RULE_SETUP
#line 605 "itex2MML.l"
{yylval=itex2MML_copy_string("&Int;"); return MOL;}
	YY_BREAK
case 481:
#line 608 "itex2MML.l"
case 482:
YY_RULE_SETUP
#line 608 "itex2MML.l"
{yylval=itex2MML_copy_string("&tint;"); return MOL;}
	YY_BREAK
case 483:
#line 611 "itex2MML.l"
case 484:
YY_RULE_SETUP
#line 611 "itex2MML.l"
{yylval=itex2MML_copy_string("&qint;"); return MOL;}
	YY_BREAK
case 485:
#line 614 "itex2MML.l"
case 486:
#line 615 "itex2MML.l"
case 487:
YY_RULE_SETUP
#line 615 "itex2MML.l"
{yylval=itex2MML_copy_string("&conint;"); return MOL;}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 617 "itex2MML.l"
{yylval=itex2MML_copy_string("&times;"); return MOL;}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 618 "itex2MML.l"
{yylval=itex2MML_copy_string("&sstarf;"); return MOL;}
	YY_BREAK
case 490:
#line 620 "itex2MML.l"
case 491:
YY_RULE_SETUP
#line 620 "itex2MML.l"
{yylval=itex2MML_copy_string("&odash;"); return MOL;}
	YY_BREAK
case 492:
#line 623 "itex2MML.l"
case 493:
YY_RULE_SETUP
#line 623 "itex2MML.l"
{yylval=itex2MML_copy_string("&boxminus;"); return MOL;}
	YY_BREAK
case 494:
#line 625 "itex2MML.l"
case 495:
YY_RULE_SETUP
#line 625 "itex2MML.l"
{yylval=itex2MML_copy_string("&boxplus;"); return MOL;}
	YY_BREAK
case 496:
#line 627 "itex2MML.l"
case 497:
YY_RULE_SETUP
#line 627 "itex2MML.l"
{yylval=itex2MML_copy_string("&boxtimes;"); return MOL;}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 629 "itex2MML.l"
{yylval=itex2MML_copy_string("&Sum;"); return MOB;}
	YY_BREAK
case 499:
#line 632 "itex2MML.l"
case 500:
YY_RULE_SETUP
#line 632 "itex2MML.l"
{yylval=itex2MML_copy_string("&prod;"); return MOB;}
	YY_BREAK
case 501:
#line 635 "itex2MML.l"
case 502:
YY_RULE_SETUP
#line 635 "itex2MML.l"
{yylval=itex2MML_copy_string("&coprod;"); return MOB;}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 637 "itex2MML.l"
{yylval=itex2MML_copy_string("&otimes;"); return MOL;}
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 638 "itex2MML.l"
{yylval=itex2MML_copy_string("&Otimes;"); return MOL;}
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 639 "itex2MML.l"
{yylval=itex2MML_copy_string("&bigotimes;"); return MOL;}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 642 "itex2MML.l"
{yylval=itex2MML_copy_string("&oplus;"); return MOL;}
	YY_BREAK
case 507:
#line 644 "itex2MML.l"
case 508:
YY_RULE_SETUP
#line 644 "itex2MML.l"
{yylval=itex2MML_copy_string("&bigoplus;"); return MOB;}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 646 "itex2MML.l"
{yylval=itex2MML_copy_string("&bigodot;"); return MOB;}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 647 "itex2MML.l"
{yylval=itex2MML_copy_string("&bigsqcup;"); return MOB;}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 648 "itex2MML.l"
{yylval=itex2MML_copy_string("&biguplus;"); return MOB;}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 650 "itex2MML.l"
{yylval=itex2MML_copy_string("&wedge;"); return MOL;}
	YY_BREAK
case 513:
#line 652 "itex2MML.l"
case 514:
YY_RULE_SETUP
#line 652 "itex2MML.l"
{yylval=itex2MML_copy_string("&xwedge;"); return MOB;}
	YY_BREAK
case 515:
#line 655 "itex2MML.l"
case 516:
YY_RULE_SETUP
#line 655 "itex2MML.l"
{yylval=itex2MML_copy_string("&bigvee;"); return MOB;}
	YY_BREAK
case 517:
#line 658 "itex2MML.l"
case 518:
YY_RULE_SETUP
#line 658 "itex2MML.l"
{yylval=itex2MML_copy_string("&#8523;"); return MOL;}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 660 "itex2MML.l"
{return FRAC;}
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 661 "itex2MML.l"
{return TFRAC;}
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 663 "itex2MML.l"
{return BINOM;}
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 665 "itex2MML.l"
{return TENSOR;}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 667 "itex2MML.l"
{return MULTI;}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 669 "itex2MML.l"
{return OVERBRACE;}
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 671 "itex2MML.l"
{return UNDERBRACE;}
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 673 "itex2MML.l"
{return BAR;}
	YY_BREAK
case 527:
#line 675 "itex2MML.l"
case 528:
#line 676 "itex2MML.l"
case 529:
YY_RULE_SETUP
#line 676 "itex2MML.l"
{return WIDEBAR;}
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 678 "itex2MML.l"
{return VEC;} 
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 679 "itex2MML.l"
{return WIDEVEC;}
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 681 "itex2MML.l"
{return DOT;}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 683 "itex2MML.l"
{return DDOT;}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 685 "itex2MML.l"
{return TILDE;} 
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 686 "itex2MML.l"
{return WIDETILDE;}
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 689 "itex2MML.l"
{return CHECK;} 
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 690 "itex2MML.l"
{return WIDECHECK;}
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 693 "itex2MML.l"
{return HAT;} 
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 694 "itex2MML.l"
{return WIDEHAT;}
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 696 "itex2MML.l"
{return UNDER;}
	YY_BREAK
case 541:
#line 699 "itex2MML.l"
case 542:
YY_RULE_SETUP
#line 699 "itex2MML.l"
{return OVER;}
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 701 "itex2MML.l"
{return TEXOVER;}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 702 "itex2MML.l"
{return TEXATOP;}
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 704 "itex2MML.l"
{return UNDEROVER;}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 706 "itex2MML.l"
{return SQRT;}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 708 "itex2MML.l"
{return ROOT;}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 710 "itex2MML.l"
{BEGIN(INT1); return SPACE;}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 712 "itex2MML.l"
{BEGIN(PLAINTEXT); return TEXTBOX;}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 714 "itex2MML.l"
{BEGIN(PLAINTEXT); return STATLINE;}
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 716 "itex2MML.l"
{return TOGGLE;}
	YY_BREAK
case 552:
#line 719 "itex2MML.l"
case 553:
YY_RULE_SETUP
#line 719 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return FGHIGHLIGHT;}
	YY_BREAK
case 554:
#line 722 "itex2MML.l"
case 555:
YY_RULE_SETUP
#line 722 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return BGHIGHLIGHT;}
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 724 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return COLOR;}
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 725 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return BGCOLOR;}
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 727 "itex2MML.l"
{itex2MML_rowposn=2; return DISPLAY;}
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 729 "itex2MML.l"
{itex2MML_rowposn=2; return TEXTSTY;}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 731 "itex2MML.l"
{return TEXTSIZE;}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 733 "itex2MML.l"
{return SCSIZE;}
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 735 "itex2MML.l"
{return SCSCSIZE;}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 737 "itex2MML.l"
{return ITALICS;}
	YY_BREAK
case 564:
#line 740 "itex2MML.l"
case 565:
YY_RULE_SETUP
#line 740 "itex2MML.l"
{return BOLD;}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 742 "itex2MML.l"
{BEGIN(ROMAN); return RM;}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 744 "itex2MML.l"
{BEGIN(BBOLD); return BB;}
	YY_BREAK
case 568:
#line 747 "itex2MML.l"
case 569:
YY_RULE_SETUP
#line 747 "itex2MML.l"
{BEGIN(FRAKTUR); return FRAK;}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 749 "itex2MML.l"
{return SLASHED;}
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 751 "itex2MML.l"
{BEGIN(CALLIGRAPHIC); return CAL;}
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 753 "itex2MML.l"
{BEGIN(MATHENV); return BEGINENV;}
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 754 "itex2MML.l"
{BEGIN(MATHENV); return ENDENV;}
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 756 "itex2MML.l"
{return SUBSTACK;}
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 758 "itex2MML.l"
{return ARRAY;}
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 760 "itex2MML.l"
{return ARRAYOPTS;}
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 762 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return COLALIGN;}
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 764 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return COLLAYOUT;}
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 766 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return ROWALIGN;}
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 768 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return ALIGN;}
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 770 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return EQROWS;}
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 772 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return EQCOLS;}
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 774 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return ROWLINES;}
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 776 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return COLLINES;}
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 778 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return FRAME;}
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 780 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return PADDING;}
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 782 "itex2MML.l"
{return ROWOPTS;}
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 784 "itex2MML.l"
{return CELLOPTS;} 
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 786 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return ROWSPAN;}
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 788 "itex2MML.l"
{BEGIN(ATTRIBUTELIST); return COLSPAN;}
	YY_BREAK
case 591:
#line 792 "itex2MML.l"
case 592:
YY_RULE_SETUP
#line 792 "itex2MML.l"
{return THINSPACE;}
	YY_BREAK
case 593:
#line 795 "itex2MML.l"
case 594:
YY_RULE_SETUP
#line 795 "itex2MML.l"
{return MEDSPACE;}
	YY_BREAK
case 595:
#line 798 "itex2MML.l"
case 596:
YY_RULE_SETUP
#line 798 "itex2MML.l"
{return THICKSPACE;}
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 800 "itex2MML.l"
{return QUAD;}
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 801 "itex2MML.l"
{return QQUAD;}
	YY_BREAK
case 599:
#line 804 "itex2MML.l"
case 600:
YY_RULE_SETUP
#line 804 "itex2MML.l"
{return NEGSPACE;}
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 806 "itex2MML.l"
{return PHANTOM;}
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 808 "itex2MML.l"
{BEGIN(PLAINTEXT); return HREF;}
	YY_BREAK
case 603:
#line 811 "itex2MML.l"
case 604:
YY_RULE_SETUP
#line 811 "itex2MML.l"
{BEGIN(PLAINTEXT); return MATHOP;}
	YY_BREAK
case 605:
/* rule 605 can match eol */
YY_RULE_SETUP
#line 813 "itex2MML.l"
;
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 815 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext+1); return MOP;}
	YY_BREAK
case 607:
#line 818 "itex2MML.l"
case 608:
#line 819 "itex2MML.l"
case 609:
YY_RULE_SETUP
#line 819 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return MI;}
	YY_BREAK
case 610:
/* rule 610 can match eol */
YY_RULE_SETUP
#line 821 "itex2MML.l"
itex2MML_lineno++;
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 822 "itex2MML.l"
;
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 825 "itex2MML.l"
{return UNKNOWNCHAR;}
	YY_BREAK

case 613:
/* rule 613 can match eol */
YY_RULE_SETUP
#line 828 "itex2MML.l"
{BEGIN(MATH); yylval=itex2MML_copy_string(itex2MML_yytext); if (yylval != itex2MML_empty_string) { yylval[0]='"'; yylval[itex2MML_yyleng-1]='"'; } return ATTRLIST;}
	YY_BREAK

case 614:
YY_RULE_SETUP
#line 831 "itex2MML.l"
{BEGIN(MATH); return MATRIX;}
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 832 "itex2MML.l"
{BEGIN(MATH); return PMATRIX;}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 833 "itex2MML.l"
{BEGIN(MATH); return BMATRIX;}
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 834 "itex2MML.l"
{BEGIN(MATH); return BBMATRIX;}
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 835 "itex2MML.l"
{BEGIN(MATH); return VMATRIX;}
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 836 "itex2MML.l"
{BEGIN(MATH); return VVMATRIX;}
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 837 "itex2MML.l"
{BEGIN(MATH); return SMALLMATRIX;}
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 838 "itex2MML.l"
{BEGIN(MATH); return CASES;}
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 839 "itex2MML.l"
{BEGIN(MATH); return ALIGNED;}
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 840 "itex2MML.l"
{BEGIN(MATH); return GATHERED;}
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 841 "itex2MML.l"
{BEGIN(MATH); return ALIGNED;}
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 842 "itex2MML.l"
{BEGIN(SVGENV); return SVG;}
	YY_BREAK


case 626:
YY_RULE_SETUP
#line 846 "itex2MML.l"
{BEGIN(MATH); return ENDSVG;}
	YY_BREAK
case 627:
/* rule 627 can match eol */
YY_RULE_SETUP
#line 847 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); BEGIN(SVGENV); return XMLSTRING;}
	YY_BREAK


case 628:
YY_RULE_SETUP
#line 851 "itex2MML.l"
{return ST;}
	YY_BREAK
case 629:
YY_RULE_SETUP
#line 852 "itex2MML.l"
{BEGIN(MATH); return END;}
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 853 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return RMCHAR;}
	YY_BREAK
case 631:
/* rule 631 can match eol */
YY_RULE_SETUP
#line 854 "itex2MML.l"
;
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 855 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK


case 633:
YY_RULE_SETUP
#line 859 "itex2MML.l"
{return ST;}
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 860 "itex2MML.l"
{BEGIN(MATH); return END;}
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 861 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return BBLOWERCHAR;}
	YY_BREAK
case 636:
YY_RULE_SETUP
#line 862 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return BBUPPERCHAR;}
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 863 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return BBDIGIT;}
	YY_BREAK
case 638:
/* rule 638 can match eol */
YY_RULE_SETUP
#line 864 "itex2MML.l"
;
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 865 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK


case 640:
YY_RULE_SETUP
#line 869 "itex2MML.l"
{return ST;}
	YY_BREAK
case 641:
YY_RULE_SETUP
#line 870 "itex2MML.l"
{BEGIN(MATH); return END;}
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 871 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return CALCHAR;}
	YY_BREAK
case 643:
/* rule 643 can match eol */
YY_RULE_SETUP
#line 872 "itex2MML.l"
;
	YY_BREAK
case 644:
YY_RULE_SETUP
#line 873 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK


case 645:
YY_RULE_SETUP
#line 877 "itex2MML.l"
{return ST;}
	YY_BREAK
case 646:
YY_RULE_SETUP
#line 878 "itex2MML.l"
{BEGIN(MATH); return END;}
	YY_BREAK
case 647:
YY_RULE_SETUP
#line 879 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext); return FRAKCHAR;}
	YY_BREAK
case 648:
/* rule 648 can match eol */
YY_RULE_SETUP
#line 880 "itex2MML.l"
;
	YY_BREAK
case 649:
YY_RULE_SETUP
#line 881 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK


case 650:
/* rule 650 can match eol */
YY_RULE_SETUP
#line 885 "itex2MML.l"
{yylval=itex2MML_copy_string(itex2MML_yytext+1); if ((itex2MML_yyleng > 1) && (yylval != itex2MML_empty_string)) yylval[itex2MML_yyleng-2]='\0'; BEGIN(MATH); return TEXTSTRING;}
	YY_BREAK


case 651:
YY_RULE_SETUP
#line 889 "itex2MML.l"
{return ST;}
	YY_BREAK
case 652:
YY_RULE_SETUP
#line 890 "itex2MML.l"
{BEGIN(INT2); return END;}
	YY_BREAK
case 653:
YY_RULE_SETUP
#line 891 "itex2MML.l"
{yylval=itex2MML_copy_string_extra(itex2MML_yytext, 1); if (itex2MML_yyleng && (yylval != itex2MML_empty_string)) { yylval[itex2MML_yyleng]=yylval[itex2MML_yyleng-1]; yylval[itex2MML_yyleng-1]='.'; yylval[itex2MML_yyleng+1]='\0'; } return INTONE;}
	YY_BREAK
case 654:
/* rule 654 can match eol */
YY_RULE_SETUP
#line 892 "itex2MML.l"
;
	YY_BREAK
case 655:
YY_RULE_SETUP
#line 893 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK


case 656:
YY_RULE_SETUP
#line 897 "itex2MML.l"
{return ST;}
	YY_BREAK
case 657:
YY_RULE_SETUP
#line 898 "itex2MML.l"
{BEGIN(INT3); return END;}
	YY_BREAK
case 658:
YY_RULE_SETUP
#line 899 "itex2MML.l"
{yylval=itex2MML_copy_string_extra(itex2MML_yytext, 1); if (itex2MML_yyleng && (yylval != itex2MML_empty_string)) { yylval[itex2MML_yyleng]=yylval[itex2MML_yyleng-1]; yylval[itex2MML_yyleng-1]='.'; yylval[itex2MML_yyleng+1]='\0'; } return INTTWO;}
	YY_BREAK
case 659:
/* rule 659 can match eol */
YY_RULE_SETUP
#line 900 "itex2MML.l"
;
	YY_BREAK
case 660:
YY_RULE_SETUP
#line 901 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK


case 661:
YY_RULE_SETUP
#line 905 "itex2MML.l"
{return ST;}
	YY_BREAK
case 662:
YY_RULE_SETUP
#line 906 "itex2MML.l"
{BEGIN(MATH); return END;}
	YY_BREAK
case 663:
YY_RULE_SETUP
#line 907 "itex2MML.l"
{yylval=itex2MML_copy_string_extra(itex2MML_yytext, 1); if (itex2MML_yyleng && (yylval != itex2MML_empty_string)) { yylval[itex2MML_yyleng]=yylval[itex2MML_yyleng-1]; yylval[itex2MML_yyleng-1]='.'; yylval[itex2MML_yyleng+1]='\0'; } return INTTHREE;}
	YY_BREAK
case 664:
/* rule 664 can match eol */
YY_RULE_SETUP
#line 908 "itex2MML.l"
;
	YY_BREAK
case 665:
YY_RULE_SETUP
#line 909 "itex2MML.l"
{return itex2MML_yytext[0];}
	YY_BREAK

case 666:
YY_RULE_SETUP
#line 914 "itex2MML.l"
ECHO;
	YY_BREAK
#line 4584 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MATH):
case YY_STATE_EOF(ATTRIBUTELIST):
case YY_STATE_EOF(BBOLD):
case YY_STATE_EOF(FRAKTUR):
case YY_STATE_EOF(CALLIGRAPHIC):
case YY_STATE_EOF(ROMAN):
case YY_STATE_EOF(PLAINTEXT):
case YY_STATE_EOF(INT1):
case YY_STATE_EOF(INT2):
case YY_STATE_EOF(INT3):
case YY_STATE_EOF(MATHENV):
case YY_STATE_EOF(SVGENV):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed itex2MML_yyin at a new source and called
			 * itex2MML_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = itex2MML_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( itex2MML_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * itex2MML_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of itex2MML_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					itex2MML_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			itex2MML_yyrestart(itex2MML_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) itex2MML_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2519 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2519 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2518);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up itex2MML_yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					itex2MML_yyrestart(itex2MML_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( itex2MML_yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve itex2MML_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void itex2MML_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        itex2MML_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            itex2MML_yy_create_buffer(itex2MML_yyin,YY_BUF_SIZE );
	}

	itex2MML_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	itex2MML_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void itex2MML_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		itex2MML_yypop_buffer_state();
	 *		itex2MML_yypush_buffer_state(new_buffer);
     */
	itex2MML_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	itex2MML_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (itex2MML_yywrap()) processing, but the only time this flag
	 * is looked at is after itex2MML_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void itex2MML_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	itex2MML_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE itex2MML_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) itex2MML_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in itex2MML_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) itex2MML_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in itex2MML_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	itex2MML_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with itex2MML_yy_create_buffer()
 * 
 */
    void itex2MML_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		itex2MML_yyfree((void *) b->yy_ch_buf  );

	itex2MML_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a itex2MML_yyrestart() or at EOF.
 */
    static void itex2MML_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	itex2MML_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then itex2MML_yy_init_buffer was _probably_
     * called from itex2MML_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void itex2MML_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		itex2MML_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void itex2MML_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	itex2MML_yyensure_buffer_stack();

	/* This block is copied from itex2MML_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from itex2MML_yy_switch_to_buffer. */
	itex2MML_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void itex2MML_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	itex2MML_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		itex2MML_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void itex2MML_yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)itex2MML_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in itex2MML_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)itex2MML_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in itex2MML_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE itex2MML_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) itex2MML_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in itex2MML_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	itex2MML_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to itex2MML_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       itex2MML_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE itex2MML_yy_scan_string (yyconst char * yystr )
{
    
	return itex2MML_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to itex2MML_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE itex2MML_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) itex2MML_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in itex2MML_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = itex2MML_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in itex2MML_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up itex2MML_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		itex2MML_yytext[itex2MML_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = itex2MML_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		itex2MML_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int itex2MML_yyget_lineno  (void)
{
        
    return itex2MML_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *itex2MML_yyget_in  (void)
{
        return itex2MML_yyin;
}

/** Get the output stream.
 * 
 */
FILE *itex2MML_yyget_out  (void)
{
        return itex2MML_yyout;
}

/** Get the length of the current token.
 * 
 */
int itex2MML_yyget_leng  (void)
{
        return itex2MML_yyleng;
}

/** Get the current token.
 * 
 */

char *itex2MML_yyget_text  (void)
{
        return itex2MML_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void itex2MML_yyset_lineno (int  line_number )
{
    
    itex2MML_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see itex2MML_yy_switch_to_buffer
 */
void itex2MML_yyset_in (FILE *  in_str )
{
        itex2MML_yyin = in_str ;
}

void itex2MML_yyset_out (FILE *  out_str )
{
        itex2MML_yyout = out_str ;
}

int itex2MML_yyget_debug  (void)
{
        return itex2MML_yy_flex_debug;
}

void itex2MML_yyset_debug (int  bdebug )
{
        itex2MML_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from itex2MML_yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    itex2MML_yyin = stdin;
    itex2MML_yyout = stdout;
#else
    itex2MML_yyin = (FILE *) 0;
    itex2MML_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * itex2MML_yylex_init()
     */
    return 0;
}

/* itex2MML_yylex_destroy is for both reentrant and non-reentrant scanners. */
int itex2MML_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		itex2MML_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		itex2MML_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	itex2MML_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * itex2MML_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *itex2MML_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *itex2MML_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void itex2MML_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see itex2MML_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 914 "itex2MML.l"



void itex2MML_restart ()
{
	BEGIN(INITIAL);
}

static const char *  s_itex2MML_buffer = 0;
static unsigned long s_itex2MML_length = 0;

void itex2MML_setup (const char * buffer, unsigned long length)
{
	itex2MML_yy_flush_buffer(YY_CURRENT_BUFFER );

	s_itex2MML_buffer = buffer;
	s_itex2MML_length = length;
}

static int s_itex2MML_read (char * buffer, int max_size)
{
	int result = 0;

	if (max_size < s_itex2MML_length)
	{
		result = max_size;

		memcpy (buffer, s_itex2MML_buffer, max_size);

		s_itex2MML_buffer += max_size;
		s_itex2MML_length -= max_size;
	}
	else
	{
		result = s_itex2MML_length;

		memcpy (buffer, s_itex2MML_buffer, s_itex2MML_length);

		s_itex2MML_buffer = 0;
		s_itex2MML_length = 0;
	}
	return result;
}

